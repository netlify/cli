// /* eslint-disable no-unreachable */
// // @ts-check
// const fs = require('fs')
// const path = require('path')
// const process = require('process')

// const { GraphQL } = require('netlify-onegraph-internal')

// const { OneGraphCliClient, loadCLISession } = require('../../lib/one-graph/cli-client')
// const {
//   autocompleteCodegenModules,
//   autocompleteOperationNames,
//   defaultExampleOperationsDoc,
//   extractFunctionsFromOperationDoc,
//   // generateHandlerByOperationName,
//   // generateHandlerPreviewByOperationName,
//   generateRuntime,
//   getCodegenFunctionById,
//   getCodegenModule,
//   getNetlifyGraphConfig,
//   readGraphQLOperationsSourceFile,
//   readGraphQLSchemaFile,
// } = require('../../lib/one-graph/cli-netlify-graph')
// const { NETLIFYDEVERR, chalk, error, log } = require('../../utils')

// /**
//  * Creates the `netlify graph:debug` command
//  * @param {import('commander').CommandOptions} options
//  * @param {import('../base-command').BaseCommand} command
//  * @returns
//  */
// const graphConfigWrite = async (args, options, command) => {
//   const { config, site, state } = command.netlify

//   const configToml = readNetlifyToml()
//   if (!configToml) {
//     error('Cannot read toml')
//     return
//   }

//   const n = setNetlifyTomlCodeGeneratorModule('./blah')
//   console.log('Done:\n', n)

//   return

//   if (!site.id) {
//     error(
//       `${NETLIFYDEVERR} Warning: no siteId defined, unable to start Netlify Graph. To enable, run ${chalk.yellow(
//         'netlify init',
//       )} or ${chalk.yellow('netlify link')}`,
//     )
//   }

//   const netlifyGraphConfig = await getNetlifyGraphConfig({ command, options })

//   const siteId = site.id
//   const netlifyToken = await command.authenticate()
//   const { jwt } = await OneGraphCliClient.getGraphJwtForSite({ siteId, nfToken: netlifyToken })
//   const oneGraphSessionId = loadCLISession(state)

//   const schemaMetadata = await OneGraphCliClient.fetchCliSessionSchema({
//     jwt,
//     netlifyGraphConfig,
//     sessionId: oneGraphSessionId,
//     siteId,
//     state,
//   })

//   const schemaString = readGraphQLSchemaFile(netlifyGraphConfig)

//   let schema

//   try {
//     schema = GraphQL.buildSchema(schemaString)
//   } catch (buildSchemaError) {
//     error(`Error parsing schema: ${buildSchemaError}`)
//   }

//   let currentOperationsDoc = readGraphQLOperationsSourceFile(netlifyGraphConfig)
//   if (currentOperationsDoc.trim().length === 0) {
//     currentOperationsDoc = defaultExampleOperationsDoc
//   }

//   const parsedDoc = GraphQL.parse(currentOperationsDoc)

//   const userOperationName = args.operationName
//   // @ts-expect-error
//   const userCodegenId = options.codegen

//   let operationName = userOperationName
//   if (!operationName) {
//     operationName = await autocompleteOperationNames({ netlifyGraphConfig })
//   }

//   const codegenModule = await getCodegenModule({ config })
//   if (!codegenModule) {
//     error(
//       `No Netlify Graph codegen module specified in netlify.toml under the [graph] header. Please specify 'codeGenerator' field and try again.`,
//     )
//     return
//   }

//   let codeGenerator = userCodegenId ? await getCodegenFunctionById({ config, id: userCodegenId }) : null
//   if (!codeGenerator) {
//     codeGenerator = await autocompleteCodegenModules({ config })
//   }

//   if (!codeGenerator) {
//     error(`No code generator module found for that selection`)
//     return
//   }

//   // const generator = codeGenerator.generateHandler

//   // log(`Generating ${codeGenerator.name} for ${operationName} via ${typeof codeGenerator.generateHandler}`)

//   if (schema) {
//     const extracted = extractFunctionsFromOperationDoc(GraphQL, parsedDoc)

//     if (!schemaMetadata) {
//       error(`Unable to fetch Graph schema metadata. Please run graph:library first.`)
//     }

//     generateRuntime({
//       generate: codegenModule.generateRuntime,
//       schema,
//       // @ts-expect-error
//       schemaId: schemaMetadata.id,
//       netlifyGraphConfig,
//       logger: log,
//       fragments: extracted.fragments,
//       functions: extracted.functions,
//       operationsDoc: currentOperationsDoc,
//     })
//     //     if (codeGenerator.generatePreview) {
//     //       log(`Generating preview...`)

//     //       const generateHandlerPayload = {
//     //         generate: codeGenerator.generatePreview,
//     //         handlerOptions: {},
//     //         schema,
//     //         operationName,
//     //         netlifyGraphConfig,
//     //         logger: log,
//     //       }

//     //       const preview = generateHandlerPreviewByOperationName(generateHandlerPayload)

//     //       log(`preview:

//     // ${preview && preview.kind === 'NamedExportedFile' ? path.resolve(...preview.name) : 'UnnamedFile'}:

//     // ${preview && preview.content}`)
//     //     }
//     //     generateHandlerByOperationName({
//     //       generate: generator,
//     //       logger: log,
//     //       netlifyGraphConfig,
//     //       schema,
//     //       operationName,
//     //       handlerOptions: {},
//     //     })
//   } else {
//     error(`Failed to parse Netlify GraphQL schema`)
//   }
// }

// /**
//  * Creates the `netlify graph:debug` command
//  * @param {import('../base-command').BaseCommand} program
//  * @returns
//  */
// const createGraphDebugCommand = (program) =>
//   program
//     .command('graph:debug')
//     .description('Debug to handle support cases for Graph')
//     .option('-f, --file <name>', 'file name')
//     .option('-c, --codegen <id>', 'Code generator to use')
//     .argument('[name]', 'Operation name')
//     .action(async (operationName, options, command) => {
//       await graphConfigWrite(
//         {
//           operationName,
//         },
//         options,
//         command,
//       )
//     })

// module.exports = { createGraphDebugCommand }
