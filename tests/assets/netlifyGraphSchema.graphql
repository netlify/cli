input OneGraphSubscriptionPollScheduleRepeatInput {
  """How many minutes to wait before re-running the underlying query"""
  minutes: Int!
}

input OneGraphSubscriptionPollScheduleInput {
  """"""
  every: OneGraphSubscriptionPollScheduleRepeatInput!
}

type OneGraphSubscriptionPollingQueryDiffPrevious {
  payload: JSON
  createdAt: String
}

type OneGraphSubscriptionPollingQueryDiff {
  previous: OneGraphSubscriptionPollingQueryDiffPrevious
}

type PollingQuery {
  query: Query!
  diff: OneGraphSubscriptionPollingQueryDiff!
}

"""
Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
"""
enum OneGraphSubscriptionShowMetricsEnum {
  """Don't include any info"""
  NONE

  """Include summary info."""
  SUMMARY

  """Include summary metrics and full requests."""
  FULL_REQUESTS
}

"\nOptional authentication for making requests to the Gmail API if you want\nto use a custom gmail app instead of OneGraph's built-in app.\n\nSubscriptions are long-lived, so a refresh token must also be provided.\n\nIf you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.\n"
input OneGraphSubscriptionGmailAuthArg {
  refreshToken: String!
  accessToken: String!
}

"""Optional auth arg if not using OneGraph's built-in authentication"""
input OneGraphSubscriptionAuthArg {
  twilio: OneGraphTwilioAuth

  "\nOptional authentication for making requests to the Gmail API if you want\nto use a custom gmail app instead of OneGraph's built-in app.\n\nSubscriptions are long-lived, so a refresh token must also be provided.\n\nIf you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.\n"
  gmail: OneGraphSubscriptionGmailAuthArg
}

input NpmPackagePublishedArg {
  """
  The names of packages to be notified about when published, e.g. ["graphql", "express", "fela"]
  """
  names: [String!]!
}

type NpmNewPackagePublishedSubscriptionPayload {
  """Package being published"""
  package: NpmPackage!
}

"""Namespace for npm subscriptions."""
type NpmSubscriptionRoot {
  """Get notified when *any* package is published or updated on npm"""
  allPublishActivity: NpmNewPackagePublishedSubscriptionPayload

  """Get notified when a package is published or updated on npm"""
  packagePublished(input: NpmPackagePublishedArg!): NpmNewPackagePublishedSubscriptionPayload
}

type Subscription {
  npm(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Set to true when creating a subscription over a websocket that should only be retained and not sent over the websocket or a webhook. If set to true, `retainPayloads` must not be set to false.
    """
    retainedOnly: Boolean

    """
    Set to true to have OneGraph store payloads for this subscription. They payloads are available on the OneGraph dashboard from the app's `Subscription` page.
    """
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data for the subscription. The endpoint should return a 200 within 30 seconds to be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): NpmSubscriptionRoot!
  poll(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum

    """
    When set, OneGraph will run the query on the specified schedule, but will only deliver new payloads when the underlying query result has changed from the previous result. Use this when you only want to react to changes.
    
    When unset, OneGraph will run the query on the specified schedule, and will deliver a new payload regardless of whether it has changed from the previous runs. Use this when you want to reliably drive a process at a regular interval or monitor a value over time.
    """
    onlyTriggerWhenPayloadChanged: Boolean = true
    schedule: OneGraphSubscriptionPollScheduleInput!
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Set to true to have OneGraph store payloads for this subscription. They payloads are available on the OneGraph dashboard from the app's `Subscription` page. Use this field when creating a subscription over a websocket that should only be retained and not sent over the websocket or a webhook.
    """
    retainedOnly: Boolean
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data for the subscription. The endpoint should return a 200 within 30 seconds to be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): PollingQuery!
}

input SignoutServicesData {
  services: [OneGraphServiceEnum!]!
}

input OneGraphSignoutServiceUserInput {
  """
  Foreign user id for the user you want to sign out. You can find the foreignUser id through me.serviceMetadata.loggedInServices
  """
  foreignUserId: String!

  """Service that you want to sign out of."""
  service: OneGraphServiceEnum!
}

type SignoutServicesResponsePayload {
  me: Viewer!
}

input OneGraphCreateNetlifyTestEventDataInput {
  payload: JSON!
}

input OneGraphCreateNetlifyTestEvent {
  data: OneGraphCreateNetlifyTestEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyTestResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphCreateNetlifyLogEventDataInput {
  message: String!
}

input OneGraphCreateNetlifyLogEvent {
  data: OneGraphCreateNetlifyLogEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyLogResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphDeleteNetlifyCliSessionInput {
  """The id of the session."""
  sessionId: String!
}

type OneGraphDeleteNetlifyCliSessionResponsePayload {
  """The session that was deleted."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphUpdateNetlifyCliSessionInput {
  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String

  """The id of the session"""
  id: String!
}

type OneGraphUpdateNetlifyCliSessionResponsePayload {
  """The session that was updated."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphCreateNetlifyCliSessionInput {
  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String
  appId: String!
}

type OneGraphCreateNetlifyCliSessionResponsePayload {
  """The session that was created."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphAckNetlifyCliEventsInput {
  eventIds: [String!]!
  sessionId: String!
}

type OneGraphAckNetlifyCliEventsResponsePayload {
  """The list of events that were acknowledged"""
  events: [OneGraphNetlifyCliSessionEvent!]!
}

input OneGraphModifySchemaTokenInput {
  """Id for the app that you want to modify the schema for."""
  appId: String!
}

type OneGraphCreateModifySchemaTokenResponsePayload {
  """The access token that can be used to modify the app's schema."""
  accessToken: OneGraphAccessToken!
}

input OneGraphGraphQLSchemaExternalGraphQLSchemaInput {
  """The id of the external GraphQL schema."""
  externalGraphQLSchemaId: String!
}

input OneGraphCreateGraphQLSchemaInput {
  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """External GraphQL schemas to add"""
  externalGraphQLSchemas: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """Optional id of a Salesforce schema to attach to the app."""
  salesforceSchemaId: String

  """The optional id of the GraphQL schema that this was derived from."""
  parentId: String

  """
  The list of services that this schema should use. Leave blank if you want to add support for all supported services.
  """
  enabledServices: [OneGraphServiceEnumArg!]

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphCreateGraphQLSchemaResponsePayload {
  graphqlSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

input OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput {
  name: String!
  netlifySiteId: String!
}

type OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpsertAppForNetlifySiteInput {
  netlifySiteId: String!
}

type OneGraphUpsertAppForNetlifySiteResponsePayload {
  """The app that is associated with the Netlify site."""
  app: OneGraphApp!

  """The app that is associated with the Netlify account."""
  org: OneGraphOrg!
}

input OneGraphCreateEmptyAccessTokenInput {
  """
  Number of seconds until the token should expire. Providing a value that is over two weeks of seconds will cause the request to be rejected
  """
  expiresIn: Int = 1209600
}

type OneGraphCreateEmptyAccessTokenPayload {
  """Access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphRemoveExternalHoneycombConfigInput {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!
}

type OneGraphRemoveExternalHoneycombConfigPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp
}

input OneGraphUpdateExternalHoneycombConfigInput {
  """
  If `true`, OneGraph will send events to Honeycomb. Set to `false` to stop sending metrics.
  """
  active: Boolean

  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]

  """Honeycomb token with the ability to create datasets and send events."""
  token: String

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphUpdateExternalHoneycombConfigPayload {
  """App that the Honeycomb config belongs to."""
  app: OneGraphApp

  """The Honeycomb config that was updated."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphAddExternalHoneycombConfigDatasetInput {
  """
  The name of the dataset that the events will be pushed to in Honeycomb.
  """
  datasetName: String!
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!
}

input OneGraphAddExternalHoneycombConfigInput {
  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]!

  """Honeycomb token with the ability to create datasets and send events."""
  token: String!

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphAddExternalHoneycombConfigPayload {
  """App that the Honeycomb config was added to."""
  app: OneGraphApp

  """The Honeycomb config that was added."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphRemoveSlackEventWebhookInput {
  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphRemoveSlackEventWebhookPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was removed."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belonged to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookSigningSecretInput {
  """Slack app-level token with the authorizations:read scope."""
  signingSecret: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookSigningSecretPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookAppTokenInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookAppTokenPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphAddSlackEventWebhookInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Slack event subscription webhook signing secret."""
  signingSecret: String!

  """Unique id for the app's Slack custom OAuth credentials."""
  serviceAuthId: String!

  """App to add the slack event webhook to."""
  appId: String!
}

type OneGraphAddSlackEventWebhookPayload {
  """App that the slack event webhook was added to."""
  app: OneGraphApp

  """The slack event webhook that was added."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook was added to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphRemoveGoogleSiteVerificationInput {
  """Id of the app to remove the Google Site Verification from."""
  appId: String!
}

type OneGraphRemoveGoogleSiteVerificationPayload {
  """App that the google site verification is being removed from."""
  app: OneGraphApp
}

input OneGraphAddGoogleSiteVerificationInput {
  """The body that Google will expect at the endpoint"""
  body: String!

  """The path that Google will crawl to check the site verification"""
  path: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddGoogleSiteVerificationPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The google site verification that was added."""
  googleSiteVerification: OneGraphGoogleSiteVerification!
}

type OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload {
  """The preview salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphRemoveSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphRemoveSalesforceSchemaPayload {
  """App that the Salesforce schema was removed from."""
  app: OneGraphApp

  """The Salesforce schema that was removed."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphUpdateSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphUpdateSalesforceSchemaPayload {
  """App that the Salesforce schema was added to."""
  app: OneGraphApp

  """The Salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddSalesforceSchemaInput {
  """App to add the salesforce schema to."""
  appId: String!
}

type OneGraphAddSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphPromotePreviewSalesforceSchemaInput {
  """The id of the salesforce schema to promote."""
  salesforceSchemaId: String!

  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphPromotePreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was promoted."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddPreviewSalesforceSchemaInput {
  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphAddPreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The preview salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!

  """The GraphQL schema for the app after the preview schema is applied."""
  previewSchema: JSON!

  """The current GraphQL schema for the app."""
  currentSchema: JSON!
}

input OneGraphRemoveExternalGraphQLSchemaInput {
  """Id of the external schema to update."""
  id: String!
}

type OneGraphRemoveExternalGraphQLSchemaPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp

  """The external schema that was removed."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphUpdateExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """Id of the external schema to update."""
  id: String!
}

type OneGraphUpdateExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphAddExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  service: OneGraphSupportedExternalGraphQLService!

  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphEnableGitHubAppWebhookInput {
  serviceAuthId: String!
}

type OneGraphEnableGitHubAppWebhookResponsePayload {
  """Custom OAuth Client that was updated"""
  serviceAuth: OneGraphServiceAuth!

  """GitHub app webhook that was created"""
  gitHubAppWebhook: OneGraphGitHubAppWebhook!
}

type OneGraphSignoutResponsePayload {
  me: Viewer!
}

"""A OneGraph SignIn result"""
type OneGraphSignInResult {
  """
  The accessToken that can be used to make requests on behalf of the OneGraph user
  """
  accessToken: OneGraphAccessToken
}

input OneGraphDisableAuthGuardianSlackIntegrationInput {
  appId: String!
}

type OneGraphDisableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphEnableAuthGuardianSlackIntegrationInput {
  authToken: String!
  channel: String!
  appId: String!
}

type OneGraphEnableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput {
  """The id of the delegation."""
  id: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult {
  """The App that delegation was disabled for."""
  app: OneGraphApp!
}

input OneGraphDisableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was enabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was enabled for."""
  repoOwner: String!
}

input OneGraphEnableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphEnableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was disabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was disabled for."""
  repoOwner: String!
}

input OneGraphEvictCachedPersistedQueryResultsInput {
  """The operationName of the cached result."""
  operationName: String

  """
  Variables values that must match. Note that this specifies the *minimum* of the match: even if there are *additional* variables in the cached query that weren't provided here, if the cached query successfully matches *at least* the variables provided here, the result will be removed from the cache.
  """
  variables: JSON

  """The id of the persisted query."""
  docId: String!

  """Id for the app that the query was persisted on."""
  appId: String!
}

type OneGraphEvictCachedResultsResponsePayload {
  docId: String!
}

input OneGraphDeletePersistedQueryInput {
  id: String!
  appId: String!
}

type OneGraphDeletePersistedQueryResponsePayload {
  app: OneGraphApp!
}

input OneGraphPersistedQueryTokenInput {
  """Id for the app that you want to persist queries on."""
  appId: String!
}

type OneGraphCreatePersitQueryTokenResponsePayload {
  """The access token that can be used to persist queries"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpdatePersistedQueryInput {
  """Replace the current tags on the query with the provided tags."""
  replaceTags: [String!]

  """Tags to remove from the query"""
  removeTags: [String!]

  """Tags to add to the query."""
  addTags: [String!]

  """A new description for the query."""
  description: String
  accessToken: String

  """The id of the app that the persisted query belongs to."""
  appId: String!

  """The id of the persisted query."""
  id: String!
}

type OneGraphUpdatedPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

input OneGraphCreatePersistedQueryParentInput {
  """
  An optional list of tags to remove from the parent query. If any of the provided tags aren't present on the parent, the mutation will fail. No persisted queries will be created and no tags will be removed from the parent.
  """
  removeTags: [String!]

  """The id of the parent"""
  id: String!
}

input OneGraphPersistedQueryCacheStrategyArg {
  """Number of seconds to cache the query result for."""
  timeToLiveSeconds: Float!
}

input OneGraphCreatePersistedQueryInput {
  """
  The parent persisted query. It can be used to track lineage of the query.
  """
  parent: OneGraphCreatePersistedQueryParentInput

  """
  A description for the persisted query. Maximum length is 2096 characters.
  """
  description: String

  """
  List of tags to add to the persisted query. Tags are free-form text that can be used to categorize persisted queries. Each tag must be under 256 characters and there can be a maximum of 10 tags on a single persisted query.
  """
  tags: [String!]
  accessToken: String

  """
  If set to true, and there was a successful execution of the query in the last 30 days, then the last successful result will be returned if we encounter any error when executing the query. If we do not have a previous successful result, then the response with the error will be returned.
  
  Note that the fallback result will be returned even in the case of partial success.
  
  This parameter is useful when you expect that your queries might be rate-limited by the underlying service.
  
  The query must provide a cache strategy in order to use `fallbackOnError`.
  """
  fallbackOnError: Boolean
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """
  Operation names to allow. If not provided, then all operations in the document are allowed.
  """
  allowedOperationNames: [String!]
  fixedVariables: JSON
  freeVariables: [String!]
  query: String!
  appId: String!
}

type OneGraphPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

enum OneGraphDataVitualizationSupportedServiceArg {
  GMAIL
}

input OneGraphStartDataVirtualizationInput {
  """
  Account ID to enable the service for. Must match the currently logged in account id
  """
  accountId: String!

  """Service to enable data virtualization for"""
  service: OneGraphDataVitualizationSupportedServiceArg!
}

"""
Information about data virtualization that has been enabled for a service 
"""
type OneGraphDataVirtualizationDetails {
  accountId: String!
  graphQLEndpoint: String!
  service: String!
}

type OneGraphStartDataVirtualizationPayload {
  """Organization that was updated by this mutation"""
  dataVirutalizationDetails: OneGraphDataVirtualizationDetails!
}

input OneGraphUpdateAppByIdPatch {
  """New name for the app"""
  name: String!
}

input OneGraphUpdateAppByIdInput {
  """New fields for the app"""
  patch: OneGraphUpdateAppByIdPatch!

  """Id of the app"""
  id: String!
}

type OneGraphUpdateAppByIdResponsePayload {
  """App that was updated by this mutation"""
  app: OneGraphApp!
}

input OneGraphUpdateOrgByIdPatch {
  """New name for the organization"""
  name: String!
}

input OneGraphUpdateOrgByIdInput {
  """New fields for the organization"""
  patch: OneGraphUpdateOrgByIdPatch!

  """Id of the organization"""
  id: String!
}

type OneGraphUpdateOrgByIdResponsePayload {
  """Organization that was updated by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateOrgInput {
  """Name for the organization"""
  name: String!
}

type OneGraphCreateOrgResponsePayload {
  """Organization that was created by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateShortenedUrlInput {
  operation: String
  description: String
  name: String
  variables: String
  query: String!
}

type OneGraphShortenUrlResponsePayload {
  shortenedUrl: OneGraphShortenedQuery!
}

input OneGraphPersistAuthsInput {
  """
  Optional OneGraph accessToken to add the auths to. If not provided, OneGraph will look for a Bearer token in the Authorization header.
  """
  accessToken: String
  auths: OneGraphServiceAuths!
}

type OneGraphPersistAuthsResponsePayload {
  me: Viewer!
}

input OneGraphAddAuthsToPersonalTokenInput {
  """
  Auths to establish the anchor. Note that these auths won't be added to the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  appId: String!

  """
  Token that will be destroyed and have its auths moved to the personal token.
  """
  sacrificialToken: String!
  personalToken: String!
}

type OneGraphAddAuthsToPersonalTokenResponsePayload {
  """Personal access token that was updated by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

input OneGraphDeletePersonalTokenInput {
  appId: String!
  accessToken: String!
}

type OneGraphDeletePersonalTokenResponsePayload {
  """OneGraph user"""
  oneUser: OneGraphUser!
}

input OneGraphCreatePersonalTokenInput {
  anchor: OneGraphAccessTokenAnchorEnum = ONEGRAPH_USER
  appId: String!
  accessToken: String!
  name: String!
}

type OneGraphCreatePersonalTokenResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

"""Fields to change on a subscription."""
input OneGraphGraphQLSubscriptionUpdateInputPatch {
  """The new variables to replace the existing query variables."""
  variables: JSON

  """The new query to replace the existing subscription query."""
  query: String!
}

input OneGraphSubscriptionSecretInput {
  """
  A hex-encoded key that will be used to sign all webhooks sent from this subscription.
  
  You can use the signature to validate that the subscription was sent from OneGraph.
  
  The signature will be sent in the `X-OneGraph-Signature` header of the webhook. The header will contain two parts, a signature and a timestamp (in seconds since the epoch), in the following format:
  
  ```
  X-OneGraph-Signature: t=1582852002,hmac_sha256=7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a
  ```
  
  To verify the signature:
  1. Extract the timestamp (1582852002 above)
  2. Extract the signature (7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a above)
  3. Concatenate the timestamp and the request body, separeted by a period (e.g. `t + '.' + requestBody`)
  4. Compute the hmac_sha256 hash of (3)
  5. Compare the hash with the provided signature using a constant-time comparison function (e.g. crypto.timingSafeEqual in Node)
  6. Reject the request if the hash you computed does not match the provided signature or if the timestamp is too far in the past (typically, 5 minutes)
  
  Example for validating the body in Node.js:
  
  ```js
  const SECRET = 'your hmacSha256Key';
  const signature = res.get('X-OneGraph-Signature');
  if (!signature) {
    throw new Error('Missing signature');
  }
  
  const sig = {};
  for (const pair of signature.split(',')) {
    const [k, v] = pair.split('=');
    sig[k] = v;
  }
  
  if (!sig.t || !sig.hmac_sha256) {
    throw new Error('Invalid signature header');
  }
  
  const hash = crypto
    .createHmac('sha256', SECRET)
    .update(sig.t)
    .update('.')
    .update(res.body)
    .digest('hex');
  
  if (
    !crypto.timingSafeEqual(
      Buffer.from(hash, 'hex'),
      Buffer.from(sig.hmac_sha256, 'hex'),
    )
  ) {
    throw new Error('Invalid signature');
  }
  
  if (parseInt(sig.t, 10) < Date.now() / 1000 - 300 /* 5 minutes */) {
    throw new Error('Request is too old');
  }
  
  // Signature is valid
  ```
  
  Examples for creating the key:
  
  Cli:
  ```cli
  $ openssl rand -hex 32
  ```
  
  Node:
  ```js
  require('crypto').randomBytes(32).toString('hex');
  ```
  
  Ruby:
  ```ruby
  ruby -rsecurerandom -e 'puts SecureRandom.hex(32)'
  ```
  """
  hmacSha256Key: String
}

input OneGraphGraphQLSubscriptionUpdateInput {
  """The fields of the subscription to update."""
  patch: OneGraphGraphQLSubscriptionUpdateInputPatch!

  """
  The signing secret that the subscription was created with. Note that this will not update the existing secret.
  """
  secret: OneGraphSubscriptionSecretInput
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUpdateResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphGraphQLSubscriptionUnsubscribeInput {
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUnsubscribeResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphDestroyServiceAuthInput {
  serviceAuthId: String!
  appId: String!
}

type OneGraphDestroyServiceAuthResponsePayload {
  """Service auth that was destroyed by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

"""
Services OneGraph supports providing a custom clientId/clientSecret for.
"""
enum OneGraphCustomServiceAuthServiceEnum {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
}

input OneGraphCreateServiceAuthInput {
  """Custom cname for the custom OAuth client."""
  cname: String

  """Custom redirect URI."""
  customRedirectUri: String

  """
  Whether the user who created the token should be able to fetch it from OneGraph. Defaults to false.
  """
  revealTokens: Boolean = false

  """Optional list of scopes to use for your app."""
  scopes: [String!]

  """App name for trello. Required to use custom Trello credentials."""
  trelloAppName: String

  """
  Developer token for the Google Ads api. This param is required for using custom OAuth credentials for Google Ads.
  
  A developer token from Google allows your app to connect to the Google Ads API. To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing.
  
  Navigate to TOOLS & SETTINGS > SETUP > API Center. The API Center option will appear only for Google Ads Manager Accounts.
  
  If your developer token is pending approval, you can start developing immediately with the pending token you received during sign up, using a test manager account.
  
  Your pending developer token must be approved before using it with production Google Ads accounts.
  """
  googleDeveloperToken: String

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String
  clientSecret: String!
  clientId: String!
  service: OneGraphCustomServiceAuthServiceEnum!
  appId: String!
}

type OneGraphCreateServiceAuthResponsePayload {
  """Service auth that was created by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

input OneGraphRemoveNetlifySiteFromAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddNetlifySiteToAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCustomCorsOriginFromAppInput {
  customCorsOrigin: String!
  appId: String!
}

type OneGraphRemoveCustomCorsOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCORSOriginFromAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphRemoveCORSOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddCORSOriginToAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphAddCORSOriginToAppResponsePayload {
  app: OneGraphApp!
}

input SetAppCORSOriginsData {
  corsOrigins: [String!]!
  appId: String!
}

type SetAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

enum OneGraphQueryChainIfMissingEnum {
  ERROR
  ALLOW
  SKIP
}

enum OneGraphQueryChainIfListEnum {
  FIRST
  LAST
  ALL
  EACH
}

input OneGraphQueryChainArgumentDependencyInput {
  functionFromScript: String!
  maxRecur: Int = 1
  ifMissing: OneGraphQueryChainIfMissingEnum
  ifList: OneGraphQueryChainIfListEnum
  fromRequestIds: [String!]!
  name: String!
}

input OneGraphQueryChainVariableInput {
  value: JSON
  name: String!
}

input OneGraphQueryChainRequestInput {
  argumentDependencies: [OneGraphQueryChainArgumentDependencyInput!] = []
  variables: [OneGraphQueryChainVariableInput!] = []

  """The query to run. Must provide one of `query` or `operationName`."""
  query: String

  """
  The operationName of the query in the document to run. Must provide one of `query` or `operationName`.
  """
  operationName: String

  """
  The id of the query. If you provide a script in the argument dependencies for a request that depends on this query, the data from this query will be provided as `{"$ID": query-result}`.  This will typically be the same as the operation name, but could be different if your chain needs to use the same query in multiple requests.
  """
  id: String!
}

"""
Dependencies from npm. Only allows packages that don't have any dependencies of their own. Packages that rely on filesystem APIs may not work. Must provide the exact version string.
"""
input OneGraphQueryChainScriptDependencyInput {
  """
  The package's version string, e.g. `4.17.21`. Only accepts exact version strings.
  """
  version: String!

  """The name of the package, e.g. `lodash`."""
  name: String!
}

input OneGraphQueryChainInput {
  """
  If true, will copy errors from the `OneGraphQueryChainMutationResult.result` field to the top-level `errors` field. Defaults to true.
  """
  liftErrors: Boolean = true
  requests: [OneGraphQueryChainRequestInput!]!
  scriptDependencies: [OneGraphQueryChainScriptDependencyInput!]
  script: String
}

type OneGraphQueryChainMutationArgumentDependencyError {
  """The name of the error"""
  name: String

  """The error message"""
  message: String

  """The error stack, as a string"""
  stackString: String
}

type OneGraphQueryChainMutationArgumentDependencyConsoleLog {
  """The log level, `debug`, `info`, `warn`, or `error`"""
  level: String!

  """The log body."""
  body: [JSON!]!
}

type OneGraphQueryChainMutationArgumentDependencyResult {
  """The name of the argument dependency"""
  name: String!

  """The return values of the argument dependency script."""
  returnValues: [JSON!]

  """Logs captured by calling `console.log` in the script."""
  logs: [OneGraphQueryChainMutationArgumentDependencyConsoleLog!]!

  """Error, if there was an error evaluating the script."""
  error: OneGraphQueryChainMutationArgumentDependencyError
}

type OneGraphQueryChainRequest {
  """The id of the request"""
  id: String!
}

type OneGraphQueryChainMutationResult {
  """The request."""
  request: OneGraphQueryChainRequest!

  """Debug information for the argument dependencies"""
  argumentDependencies: [OneGraphQueryChainMutationArgumentDependencyResult!]!

  """The result of the query"""
  result: [JSON]!
}

type OneGraphQueryChainMutationPayload {
  results: [OneGraphQueryChainMutationResult!]!
}

"""Tours for exploring OneGraph"""
enum OneGraphTourEnum {
  DASHBOARD
  QUERYCHAIN
  AUTHGUARDIAN
}

input OneGraphCompleteTourData {
  tour: OneGraphTourEnum!
}

type OneGraphCompleteTourResponsePayload {
  me: Viewer!
}

input OneGraphUnLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphUnLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

input OneGraphLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

"""GraphQL types that support linking"""
enum OneGraphServiceLinkGraphQLTypeEnum {
  GitHubIssue
  GitHubIssueComment
  GitHubUser
  HubspotContact
  IntercomUser
  SalesforceAccount
  SalesforceCase
  SalesforceCaseComment
  SalesforceContact
  SalesforceFeedComment
  SalesforceFeedItem
  SalesforceLead
  SalesforceUser
  StripeCustomer
  StripeRefund
  ZendeskUser
}

input OneGraphServiceLinkNodeArg {
  id: String!
  type: OneGraphServiceLinkGraphQLTypeEnum!
}

input OneGraphCreateServiceLinkArg {
  endNode: OneGraphServiceLinkNodeArg!
  startNode: OneGraphServiceLinkNodeArg!
}

type OneGraphServiceLinkNode {
  type: String!
  id: String!
}

type OneGraphCreateServiceLinkResponsePayload {
  startNode: OneGraphServiceLinkNode!
  endNode: OneGraphServiceLinkNode!
}

input OneGraphDangerouslySignJwtPayloadInput {
  expiresInSeconds: Int = 300
  includeBaseFields: Boolean = true
  payload: JSON!
}

type OneGraphDangerouslySignJwtPayloadResponsePayload {
  encoded: String!
}

input OneGraphSetAppNetlifySiteNamesInput {
  netlifySiteNames: [String!]!
}

type OneGraphSetAppNetlifySiteNamesResponsePayload {
  app: OneGraphApp!
}

input OneGraphSetAuthGuardianActiveInput {
  active: Boolean!
}

type OneGraphSetAuthGuardianActiveResponsePayload {
  app: OneGraphApp
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnumArg {
  HMAC_256
  RSA_256
}

input OneGraphSetJwtSigningAlgorithmAndSecretInput {
  """
  When using symmetric (HMAC) algorithms, this is the shared secret OneGraph will use to sign the generated JSON web tokens.
  """
  sharedSecret: String

  """
  When generating a JWT for SSO, OneGraph can sign the JSON tokens with either a shared-secret (symmetric) key (HMAC) or a public/private (asymmetric) key pair (RSA)
  """
  signingAlgorithm: OneGraphJwtSigningAlgorithmEnumArg!
}

type OneGraphSetJwtSigningAlgorithmAndSecretPayload {
  app: OneGraphApp!
}

input OneGraphSetJwtPreflightQueryAndWebhookUrlInput {
  """
  An optional GraphQL query to run after a user has signed into any service. The result will be included in the body for the preflight webhook. You may want to use this to retrieve a user's Google subId, or a list of GitHub organization names a user belongs.
  """
  preflightQuery: String

  """
  When generating a JWT for SSO using OneGraph to authenticate
                  with third-parties, you can run an optional GraphQL query and
                  send the result to a webhook for preprocessing before OneGraph
                  signs the final token and passes it to the client
  """
  webhookUrl: String
}

type OneGraphSetAppJwtPreflightQueryResponsePayload {
  app: OneGraphApp!
}

"""Mutations related to apps"""
type OneGraphAppMutations {
  setCORSOrigins(corsOrigins: [String!]!): OneGraphApp!
  setJwtPreflightQueryAndWebhookUrl(input: OneGraphSetJwtPreflightQueryAndWebhookUrlInput!): OneGraphSetAppJwtPreflightQueryResponsePayload
  setJwtSigningAlgorithmAndSecret(input: OneGraphSetJwtSigningAlgorithmAndSecretInput!): OneGraphSetJwtSigningAlgorithmAndSecretPayload
  setAuthGuardianActive(input: OneGraphSetAuthGuardianActiveInput!): OneGraphSetAuthGuardianActiveResponsePayload
  setAuthGuardian(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload
  setNetlifySiteNames(input: OneGraphSetAppNetlifySiteNamesInput!): OneGraphSetAppNetlifySiteNamesResponsePayload!

  """
  Use this when you need to generate a JWT (JSON web token) with a valid signature based on the JWT algorithm settings for your app. For example, you might want to test out a token within the Hasura console, on your Netlify site, or against your own GraphQL server without going through a full auth flow manually.
  
  By default these tokens will only be valid for 5 minutes (300 seconds).
  
  Note that these tokens will be signed and valid, and will be accepted *anywhere* you have configured. **Treat them as secure tokens and guard them!**
  """
  dangerouslySignJwtPayload(input: OneGraphDangerouslySignJwtPayloadInput!): OneGraphDangerouslySignJwtPayloadResponsePayload
}

"""Mutations for the currently authed user"""
type OneGraphMutation {
  app(id: String!): OneGraphAppMutations @deprecated(reason: "Use setAppCORSOrigins")
  createServiceLink(data: OneGraphCreateServiceLinkArg!): OneGraphCreateServiceLinkResponsePayload!
  linkOneGraphNodes(input: OneGraphLinkOneGraphNodesInput!): OneGraphLinkOneGraphNodesResponsePayload!
  unLinkOneGraphNodes(input: OneGraphUnLinkOneGraphNodesInput!): OneGraphUnLinkOneGraphNodesResponsePayload!
  completeTour(data: OneGraphCompleteTourData!): OneGraphCompleteTourResponsePayload!
  createApp(
    """`id` of the organization that this app should belong to"""
    orgId: String!
    corsOrigins: [String!]!
    description: String
    name: String!
  ): OneGraphApp!
  executeChain(input: OneGraphQueryChainInput!): OneGraphQueryChainMutationPayload!
  setAppCORSOrigins(data: SetAppCORSOriginsData!): SetAppCORSOriginsResponsePayload!
  addCORSOriginToApp(input: OneGraphAddCORSOriginToAppInput!): OneGraphAddCORSOriginToAppResponsePayload!
  removeCORSOriginFromApp(input: OneGraphRemoveCORSOriginFromAppInput!): OneGraphRemoveCORSOriginFromAppResponsePayload!
  removeCustomCorsOriginFromApp(input: OneGraphRemoveCustomCorsOriginFromAppInput!): OneGraphRemoveCustomCorsOriginFromAppResponsePayload!
  addNetlifySiteToAppCORSOrigins(input: OneGraphAddNetlifySiteToAppCORSOriginsInput!): OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload!
  removeNetlifySiteFromAppCORSOrigins(input: OneGraphRemoveNetlifySiteFromAppCORSOriginsInput!): OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload!
  createServiceAuth(data: OneGraphCreateServiceAuthInput!): OneGraphCreateServiceAuthResponsePayload!
  destroyServiceAuth(data: OneGraphDestroyServiceAuthInput!): OneGraphDestroyServiceAuthResponsePayload!
  subscriptionUnsubscribe(data: OneGraphGraphQLSubscriptionUnsubscribeInput!): OneGraphGraphQLSubscriptionUnsubscribeResponsePayload!
  updateSubscription(input: OneGraphGraphQLSubscriptionUpdateInput!): OneGraphGraphQLSubscriptionUpdateResponsePayload!
  createPersonalToken(input: OneGraphCreatePersonalTokenInput!): OneGraphCreatePersonalTokenResponsePayload!
  deletePersonalToken(input: OneGraphDeletePersonalTokenInput!): OneGraphDeletePersonalTokenResponsePayload!
  addAuthsToPersonalToken(input: OneGraphAddAuthsToPersonalTokenInput!): OneGraphAddAuthsToPersonalTokenResponsePayload!
  persistAuths(input: OneGraphPersistAuthsInput!): OneGraphPersistAuthsResponsePayload!
  createShortenedUrl(input: OneGraphCreateShortenedUrlInput!): OneGraphShortenUrlResponsePayload!
  createOrg(input: OneGraphCreateOrgInput!): OneGraphCreateOrgResponsePayload!
  updateOrgById(input: OneGraphUpdateOrgByIdInput!): OneGraphUpdateOrgByIdResponsePayload!
  updateAppById(input: OneGraphUpdateAppByIdInput!): OneGraphUpdateAppByIdResponsePayload!
  enableDataVirtualization(input: OneGraphStartDataVirtualizationInput!): OneGraphStartDataVirtualizationPayload!
  createPersistedQuery(input: OneGraphCreatePersistedQueryInput!): OneGraphPersistedQueryResponsePayload!
  updatePersistedQuery(input: OneGraphUpdatePersistedQueryInput!): OneGraphUpdatedPersistedQueryResponsePayload!
  createPersitQueryToken(input: OneGraphPersistedQueryTokenInput!): OneGraphCreatePersitQueryTokenResponsePayload!
  deletePersistedQuery(input: OneGraphDeletePersistedQueryInput!): OneGraphDeletePersistedQueryResponsePayload!
  evictCachedPersistedQueryResults(input: OneGraphEvictCachedPersistedQueryResultsInput!): OneGraphEvictCachedResultsResponsePayload!

  """
  Allows non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  enableGitHubRepositorySubscriptionDelegation(input: OneGraphEnableGithubRepositorySubscriptionDelegationInput!): OneGraphEnableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  disableGitHubRepositorySubscriptionDelegation(input: OneGraphDisableGithubRepositorySubscriptionDelegationInput!): OneGraphDisableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph. Allows the owner of the app on OneGraph to remove delegation for a repo.
  """
  disableGitHubRepositorySubscriptionDelegationById(input: OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput!): OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult!
  enableAuthGuardianSlackIntegration(input: OneGraphEnableAuthGuardianSlackIntegrationInput!): OneGraphEnableAuthGuardianSlackIntegrationResponsePayload
  disableAuthGuardianSlackIntegration(input: OneGraphDisableAuthGuardianSlackIntegrationInput!): OneGraphDisableAuthGuardianSlackIntegrationResponsePayload
  destroyApp(id: String!): OneGraphApp
  saveQuery(public: Boolean, enabled: Boolean, tags: [String!]!, description: String, name: String!, body: String!): OneGraphQuery!
  updateQuery(public: Boolean, enabled: Boolean, tags: [String!], name: String, id: String!): OneGraphQuery
  destroyQuery(version: String!, name: String!): OneGraphQuery!
  signUp(agreeToTOS: Boolean!, passwordConfirm: String!, password: String!, email: String!, fullName: String!): OneGraphSignInResult!
  signIn(rememberMe: Boolean!, password: String!, email: String!): OneGraphSignInResult!
  agreeToTos(userAgreesToTheOneGraphTermsOfService: Boolean!): OneGraphUser!
  signOut: OneGraphSignoutResponsePayload!

  """
  Revokes a OneGraph access token, refresh token, or JWT. After a token is destroyed, it can no longer be used to authenticate with OneGraph.
  
  If you destroy a JWT, external services that rely on the claims embedded in the JWT may still accept the JWT and you will also have to revoke the JWT though the external service's revocation process.
  """
  destroyToken(
    """Any OneGraph access token, refresh token, or JWT"""
    token: String!
  ): Boolean!
  exchangeGitHubContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeNetlifyContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeZeitContextForOneGraphAccessToken: OneGraphSignInResult!
  associateOneGraphUserWithGitHubAccount: OneGraphUser!
  associateOneGraphUserWithNetlifyAccount: OneGraphUser!
  requestPasswordReset(email: String!): String!
  resetPassword(passwordConfirm: String!, password: String!, token: String!): Boolean!
  enableGitHubAppWebhook(input: OneGraphEnableGitHubAppWebhookInput!): OneGraphEnableGitHubAppWebhookResponsePayload!
  addExternalGraphQLSchema(input: OneGraphAddExternalGraphQLSchemaInput!): OneGraphAddExternalGraphQLSchemaPayload!
  updateExternalGraphQLSchema(input: OneGraphUpdateExternalGraphQLSchemaInput!): OneGraphUpdateExternalGraphQLSchemaPayload!
  removeExternalGraphQLSchema(input: OneGraphRemoveExternalGraphQLSchemaInput!): OneGraphRemoveExternalGraphQLSchemaPayload!
  addPreviewSalesforceSchema(input: OneGraphAddPreviewSalesforceSchemaInput!): OneGraphAddPreviewSalesforceSchemaPayload!
  promotePreviewSalesforceSchema(input: OneGraphPromotePreviewSalesforceSchemaInput!): OneGraphPromotePreviewSalesforceSchemaPayload!
  addSalesforceSchema(input: OneGraphAddSalesforceSchemaInput!): OneGraphAddSalesforceSchemaPayload!
  updateSalesforceSchema(input: OneGraphUpdateSalesforceSchemaInput!): OneGraphUpdateSalesforceSchemaPayload!
  removeSalesforceSchema(input: OneGraphRemoveSalesforceSchemaInput!): OneGraphRemoveSalesforceSchemaPayload!
  addPreviewSalesforceSchemaForSalesforceViewer: OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload!
  addGoogleSiteVerification(input: OneGraphAddGoogleSiteVerificationInput!): OneGraphAddGoogleSiteVerificationPayload!
  removeGoogleSiteVerification(input: OneGraphRemoveGoogleSiteVerificationInput!): OneGraphRemoveGoogleSiteVerificationPayload!
  addSlackEventWebhook(input: OneGraphAddSlackEventWebhookInput!): OneGraphAddSlackEventWebhookPayload!
  setSlackEventWebhookAppToken(input: OneGraphSetSlackEventWebhookAppTokenInput!): OneGraphSetSlackEventWebhookAppTokenPayload!
  setSlackEventWebhookSigningSecret(input: OneGraphSetSlackEventWebhookSigningSecretInput!): OneGraphSetSlackEventWebhookSigningSecretPayload!
  removeSlackEventWebhook(input: OneGraphRemoveSlackEventWebhookInput!): OneGraphRemoveSlackEventWebhookPayload!
  addExternalHoneycombConfig(input: OneGraphAddExternalHoneycombConfigInput!): OneGraphAddExternalHoneycombConfigPayload!
  updateExternalHoneycombConfig(input: OneGraphUpdateExternalHoneycombConfigInput!): OneGraphUpdateExternalHoneycombConfigPayload!
  removeExternalHoneycombConfig(input: OneGraphRemoveExternalHoneycombConfigInput!): OneGraphRemoveExternalHoneycombConfigPayload!
  createEmptyAccessToken(input: OneGraphCreateEmptyAccessTokenInput!): OneGraphCreateEmptyAccessTokenPayload!
  upsertAppForNetlifySite(input: OneGraphUpsertAppForNetlifySiteInput!): OneGraphUpsertAppForNetlifySiteResponsePayload!

  """Creates an empty personal token with a Netlify site anchor"""
  createPersonalTokenWithNetlifySiteAnchor(input: OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput!): OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload!
  createGraphQLSchema(input: OneGraphCreateGraphQLSchemaInput!): OneGraphCreateGraphQLSchemaResponsePayload!
  createModifySchemaToken(input: OneGraphModifySchemaTokenInput!): OneGraphCreateModifySchemaTokenResponsePayload!

  """
  Acknowledge a set of netlify CLI events for a session. All events must be for the same session.
  """
  ackNetlifyCliEvents(input: OneGraphAckNetlifyCliEventsInput!): OneGraphAckNetlifyCliEventsResponsePayload!

  """Create a new CLI session."""
  createNetlifyCliSession(input: OneGraphCreateNetlifyCliSessionInput!): OneGraphCreateNetlifyCliSessionResponsePayload!

  """Update a CLI session."""
  updateNetlifyCliSession(input: OneGraphUpdateNetlifyCliSessionInput!): OneGraphUpdateNetlifyCliSessionResponsePayload!

  """Delete a CLI session."""
  deleteNetlifyCliSession(input: OneGraphDeleteNetlifyCliSessionInput!): OneGraphDeleteNetlifyCliSessionResponsePayload!
  createNetlifyCliLogEvent(input: OneGraphCreateNetlifyLogEvent!): OneGraphCreateNetlifyLogResponsePayload!
  createNetlifyCliTestEvent(input: OneGraphCreateNetlifyTestEvent!): OneGraphCreateNetlifyTestResponsePayload!
}

enum NpmPublishPackagAccessEnumArg {
  """
  The package will only be visible to users with appropriate permissions (as decided by the registry).
  """
  PRIVATE

  """The package will be publicly visible and installable by anyone."""
  PUBLIC
}

enum NpmPublishPackageRegistryEnumArg {
  """Publish to the npm registry"""
  NPM

  """
  Publish to your GitHub package registry. Set your scope to the GitHub repository owner, and the name to repository name. For more info, see [GitHub's Package Repository](https://github.com/features/packages).
  """
  GITHUB
}

input OneGraphNpmPublishPackageFileArg {
  contents: String!
  path: String!
}

input NpmPublishPackageInputArg {
  """Whether the package is public or private."""
  access: NpmPublishPackagAccessEnumArg!

  """
  Which registry to publish to: npm, or a GitHub repository package repository.
  """
  registry: NpmPublishPackageRegistryEnumArg

  """The list of files to include in the package"""
  files: [OneGraphNpmPublishPackageFileArg!]!

  """
  package.json of your package. Must include `name` and `version` as strings fields at a minimum.
  """
  packageJson: JSON!
}

"""Results from running the publishPackage mutation"""
type NpmPublishPackageResult {
  """
  Whether the package was successfully uploaded to npm. Note that due to the delay between uploading and indexing, you maybe have to wait until npm reflects the new version.OneGraphNpmPackage
  
  You can also use the `packagePublished` npm subscription to be notified when the new version of your package has been published.
  """
  successfullyUploaded: Boolean
}

"""The root for Npm mutations."""
type NpmMutation {
  """Publish a package to npm or GitHub package registry"""
  publishPackage(
    """Input for package publishing"""
    input: NpmPublishPackageInputArg!
  ): NpmPublishPackageResult
}

type Mutation {
  """The root for npm mutations"""
  npm(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): NpmMutation!
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphMutation!
  testMutate(query: String!): Boolean!
  signoutServiceUser(input: OneGraphSignoutServiceUserInput!): SignoutServicesResponsePayload!
  signoutServices(data: SignoutServicesData!): SignoutServicesResponsePayload!
}

type OneGraphNetlifyCliSession {
  id: String!
  appId: String!
  netlifyUserId: String!
  name: String
  events(
    """The number of events to fetch, maximum of 1000."""
    first: Int = 1000
  ): [OneGraphNetlifyCliSessionEvent!]!
  createdAt: String!
  lastEventAt: String
  metadata: JSON
}

type OneGraphNetlifyCliSessionLogEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  message: String!
}

type OneGraphNetlifyCliSessionTestEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  payload: JSON!
}

interface OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
}

input OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  name: String!
}

"""
Commonly used values for use in JWT generation, like GitHub email address or the current time.
"""
enum OneGraphAuthGuardianBuiltInValue {
  CONTENTFUL_AVATAR_URL
  CONTENTFUL_USER_ID
  CONTENTFUL_EMAIL
  EGGHEADIO_AVATAR_URL
  EGGHEADIO_USER_ID
  EGGHEADIO_EMAIL
  EGGHEADIO_IS_PRO
  EGGHEADIO_IS_INSTRUCTOR
  EGGHEADIO_IS_COMMUNITY_MEMBER
  GITHUB_AVATAR_URL
  GITHUB_EMAIL
  GITHUB_LOGIN
  GITHUB_NAME
  GITHUB_USER_ID
  GITHUB_FULL_EMAILS
  GMAIL_EMAIL
  GMAIL_EMAIL_VERIFIED
  GMAIL_USER_ID
  LOGGED_IN_SERVICES
  NETLIFY_AVATAR_URL
  NETLIFY_EMAIL
  NETLIFY_FULL_NAME
  NETLIFY_USER_ID
  NOW_SECONDS
  NOW_MILLISECONDS
  NOW_TIMESTAMP
  SALESFORCE_EMAIL
  SALESFORCE_USER_ID
  SPOTIFY_EMAIL
  SPOTIFY_USER_ID
  STRIPE_ACCOUNT_ID
  STRIPE_ACCOUNT_PRIMARY_EMAIL
  TWITCH_TV_EMAIL
  TWITCH_TV_DISPLAY_NAME
  TWITCH_TV_LOGO_URL
  TWITCH_TV_USER_ID
  TWITTER_IS_VERIFIED
  TWITTER_EMAIL
  TWITTER_NAME
  TWITTER_PROFILE_IMAGE_URL
  TWITTER_SCREEN_NAME
  TWITTER_USER_ID
  VERCEL_AVATAR_URL
  VERCEL_EMAIL
  VERCEL_NAME
  VERCEL_USER_ID
}

input OneGraphSetAuthGuardianRuleEffectJsonValueInput {
  json: String
  builtInValue: OneGraphAuthGuardianBuiltInValue
}

input OneGraphSetAuthGuardianRuleEffectSetValueInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  path: String!
}

input OneGraphSetAuthGuardianRuleEffectInput {
  onExpressJsAddPermissions: [String!]
  onApolloServerAddRoles: [String!]
  onNetlifyAddUserRoles: [String!]
  onHasuraSetUserId: OneGraphSetAuthGuardianRuleEffectJsonValueInput
  onHasuraSetDefaultRole: String
  onHasuraSetSessionVariable: OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput
  onHasuraAddRoles: [String!]
  inTheJsonAddToListAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
  inTheJsonRemoveValueAtPath: String
  inTheJsonSetValueAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
}

input OneGraphSetAuthGuardianRuleConditionZeitInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionTwitterInput {
  hasTwitterVerifiedStatus: Boolean
  screenName: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
}

input OneGraphSetAuthGuardianRuleConditionTwitchTvInput {
  loginStatus: Boolean
  hasVerifiedEmail: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionStripeInput {
  loginStatus: Boolean
  hasAPrimaryAccountEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
  hasAnAccountIdThat: OneGraphSetAuthGuardianRuleStringConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSpotifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSalesforceInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionNetlifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGmailInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGitHubInput {
  isCollaboratorOnRepositoryWhereFullName: String
  isMemberOfOrganizationNamed: String
  hasStarredARepositoryWithAFullNameOf: String
  hasCommittedToRepositoryWithAFullNameOf: String
  login: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionEggheadioInput {
  isCommunityMember: Boolean
  isInstructor: Boolean
  isPro: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleStringConditionInput {
  isEqualToCaseInsensitively: String
  containsCaseInsensitively: String
  endsWithCaseInsensitively: String
  startsWithCaseInsensitively: String
  isEqualTo: String
  contains: String
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleEmailConditionInput {
  isEqualTo: String
  hasADomainThat: OneGraphSetAuthGuardianRuleStringConditionInput
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleConditionContentfulInput {
  confirmed: Boolean
  activated: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionInput {
  vercel: OneGraphSetAuthGuardianRuleConditionZeitInput
  twitter: OneGraphSetAuthGuardianRuleConditionTwitterInput
  twitch: OneGraphSetAuthGuardianRuleConditionTwitchTvInput
  stripe: OneGraphSetAuthGuardianRuleConditionStripeInput
  spotify: OneGraphSetAuthGuardianRuleConditionSpotifyInput
  salesforce: OneGraphSetAuthGuardianRuleConditionSalesforceInput
  netlify: OneGraphSetAuthGuardianRuleConditionNetlifyInput
  gmail: OneGraphSetAuthGuardianRuleConditionGmailInput
  gitHub: OneGraphSetAuthGuardianRuleConditionGitHubInput
  eggheadio: OneGraphSetAuthGuardianRuleConditionEggheadioInput
  contentful: OneGraphSetAuthGuardianRuleConditionContentfulInput
  always: Boolean
}

input OneGraphSetAuthGuardianRuleInput {
  effects: [OneGraphSetAuthGuardianRuleEffectInput!]!
  conditions: [OneGraphSetAuthGuardianRuleConditionInput!]!
}

input OneGraphSetAuthGuardianInput {
  rules: [OneGraphSetAuthGuardianRuleInput!]!
}

type OneGraphSetAuthGuardianResponsePayload {
  javascript: String
  graphQL: String
  jwt: String
  rules: JSON
}

"""A OneGraph Server Info"""
type OneGraphServerInfo {
  """"""
  sha: String!

  """"""
  buildNumber: Int!
}

"""Customizations to a OneGraph schema."""
type OneGraphGraphQLSchema {
  id: String!
  appId: String!
  parentGraphQLSchemaId: String
  parentGraphQLSchema: OneGraphGraphQLSchema
  services: [OneGraphServiceInfo!]!
  salesforceSchema: OneGraphSalesforceSchema

  """External GraphQL schemas for the schema."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!
  createdAt: String!
  updatedAt: String!
}

enum OneGraphExternalHoneycombConfigDatasetMetricTypeEnum {
  API_CALL
  SUBSCRIPTION_DELIVERY
}

type OneGraphExternalHoneycombConfigDataset {
  """The metric type."""
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!

  """The name of the dataset in Honeycomb."""
  datasetName: String!
}

type OneGraphExternalHoneycombConfig {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!

  """The datetime that the Honecomb config was added, in rfc3339 format."""
  createdAt: String!

  """
  The datetime that the Honeycomb config was last updated, in rfc3339 format.
  """
  updatedAt: String!

  """The Honeycomb API token that OneGraph will use to send events."""
  obfuscatedToken: String!

  """If `true`, OneGraph will send events to Honeycomb."""
  active: Boolean!

  """The last error we received while sending events to the Honeycomb API."""
  lastError: String

  """User-provided dataset names"""
  datasets: [OneGraphExternalHoneycombConfigDataset!]!
}

type OneGraphGoogleSiteVerification {
  """The root path that this will be served at."""
  path: String!

  """The content that will be served at the path."""
  body: String!
}

type OneGraphSalesforceSchema {
  """Id of the salesforce schema"""
  id: String!

  """The id of the OneGraph app that the salesforce schema belongs to."""
  appId: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Salesforce instanceUrl"""
  instanceUrl: String!

  """Salesforce Organization ID"""
  salesforceOrgId: String

  """Whether this is a preview of a change to a Salesforce schema."""
  isPreview: Boolean!

  """The previous salesforce schema, if there was one."""
  previousSalesforceSchema: OneGraphSalesforceSchema
}

enum OneGraphSupportedExternalGraphQLService {
  GRAPHCMS
  WORDPRESS
}

type OneGraphExternalGraphQLSchema {
  """Id of the external graphql schema"""
  id: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Service of the external graphql schema"""
  service: OneGraphSupportedExternalGraphQLService!

  """GraphQL endpoint of the external graphql schema"""
  endpoint: String!
}

type OneGraphExternalGraphQLSchemaConnection {
  nodes: [OneGraphExternalGraphQLSchema!]!
}

type OneGraphGithubRepositorySubscriptionDelegate {
  id: String!

  """Name with owner (e.g. onegraph/graphiql-exporer) of the GitHub repo."""
  nameWithOwner: String!

  """
  Datetime that the repo was set up to allow non-admin subscriptions (rfc3339 encoded)
  """
  createdAt: String!
}

type OneGraphGithubRepositorySubscriptionDelegateConnection {
  nodes: [OneGraphGithubRepositorySubscriptionDelegate!]!
}

"""Persisted query"""
type OneGraphPersistedQuery {
  """The persisted query's id."""
  id: String!

  """The persisted query's query string."""
  query: String!

  """The default variables provided to the query."""
  fixedVariables: JSON

  """
  The list of variables that the caller of the query is allowed to provide.
  """
  freeVariables: [String!]

  """
  The list of operation names that the caller of the query is allowed to execute. If the field is null, then all operationNames are allowed.
  """
  allowedOperationNames: [String!]

  """The list of user-defined tags that were added to the query"""
  tags: [String!]

  """The user-defined description that was added to the query"""
  description: String

  """The parent of this query, if it has one."""
  parent: OneGraphPersistedQuery
}

"""List of persisted queries."""
type OneGraphPersistedQueryConnection {
  """List of persisted queries."""
  nodes: [OneGraphPersistedQuery!]!

  """Pagination information"""
  pageInfo: PageInfo!
}

"""A custom cors origin"""
type OneGraphCustomCorsOrigin {
  """The friendly service name for the cors origin"""
  friendlyServiceName: String!

  """
  The name of the origin that should be displayed, e.g. oneblog for oneblog.netlify.app.
  """
  displayName: String!

  """The encoded value as a string, used to remove the custom cors origin."""
  encodedValue: String!
}

type OneGraphAppAuthCompletedLog implements OneGraphAppLog {
  """
  Noted whenever an end-user has completed a login for a service when using this app
  """
  service: String!
  friendlyName: String!

  """The user id according to the service they logged into"""
  serviceUserId: String

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogJwtWebhookFailed implements OneGraphAppLog {
  """
  The destination webhook where we tried to deliver the JWT for preprocessing when it failed
  """
  destination: String!

  """The numeric HTTP status code we received from the webhook (if any)"""
  responseStatusCode: Int

  """The textual responseBody we received from the webhook (if any)"""
  responseBody: String
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogSubscriptionDeliveryFailed implements OneGraphAppLog {
  """The subscription for the failed delivery attempt"""
  subscription: OneGraphAppSubscription

  """The attempt number for delivering this subscription payload"""
  attempt: Int!
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

interface OneGraphAppLog {
  id: String!
  createdAt: String!
  friendlyName: String!
  jsonData(pretty: Boolean = false): String
}

type OneGraphAppLogConnection {
  """Applogs"""
  nodes: [OneGraphAppLog!]!
}

"""An RSA public key used for signing JWTs"""
type OneGraphAppJwtRsaPublicKey {
  """The algorithm associated with this public key"""
  algorithm: String!

  """The n of the rsa key"""
  n: String!

  """The exponent of the rsa key"""
  e: String!
}

"""An HMAC key used for signing JWTs"""
type OneGraphJwtSigningKeyHmac256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!

  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The shared secret for this key (if any)"""
  sharedSecret: String
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnum {
  HMAC_256
  RSA_256
}

"""The family of Signing algorithms"""
enum OneGraphSigningAlgorithmFamilyEnum {
  SYMMETRIC
  ASYMMETRIC
}

"""An RSA public key used for signing JWTs"""
type OneGraphJwtSigningKeyRsa256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

interface OneGraphJwtSigningKey {
  """The family of algorithms used for this key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

"""The method of generating JWTs"""
enum OneGraphAppJwtGenerationMethodEnum {
  MANUAL
  AUTH_BUILDER
}

"""JWT settings for the app, useful for SSO."""
type OneGraphAppJwtSettings {
  """A query to run on every user log in to use in generating the JWT token"""
  jwtPreflightQuery: String

  """
  An optional webhook to use for generating the full JWT. Use this and `jwtPreflightQuery` to customize claims. Very useful when used alongside e.g. Hasura or PostGraphile
  """
  jwtWebhookUrl: String

  """
  Whether this app is generating JWTs on login via a manual query/webhook combination, or using OneGraph's AuthGuardian
  """
  jwtGenerationMethod: OneGraphAppJwtGenerationMethodEnum!

  """
  The rules this app is configured to use when generating JWTs on user login
  """
  jwtAuthGuardianRules: JSON

  """The current key used to sign JWTs generated for this app"""
  activeKey: OneGraphJwtSigningKey

  """List of the public keys for an app"""
  publicKeys: [OneGraphAppJwtRsaPublicKey!]

  """The full JWT configuration for Hasura"""
  hasuraConfig: String

  """
  The public well-known JWK url of where to look for public keys when verifying JWT for this app
  """
  jwksUrl: String!
}

"""Status of the subscription"""
enum OneGraphAppSubscriptionsStatusEnumArg {
  ACTIVE
  INACTIVE
}

enum OneGraphAppSubscriptionPayloadDeliveryStatus {
  WAITING
  DELIVERING
  DELIVERED
  FAILED
}

"""Payload for a subscription created by the app"""
type OneGraphAppSubscriptionPayload {
  """Unique id for the payload."""
  id: String!

  """
  Body of the payload or null if the payload is expired. This is the full body of the GraphQL payload, including the `data`, `errors`, and `extensions` fields as JSON.
  """
  body: JSON!

  """
  `true` if the payload body has been deleted. Payload bodies will expire after 1 year.
  """
  isExpired: Boolean!

  """
  The time that this payload was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  The delivery status of a subscription, if the subscription has a destination.
  """
  deliveryStatus: OneGraphAppSubscriptionPayloadDeliveryStatus!

  """The number of times we attempted to deliver the payload."""
  deliveryAttempts: Int!

  """
  The last time we attempted to deliver the payload, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  lastDeliveryAttempt: String

  """
  The status code we received from the webhook destination the last time we attempted to deliver the payload. This field will be null for Websocket and Retain-only subscriptions.
  """
  lastStatusCode: Int

  """
  If there was an error delivering the payload to a webhook destination, this field will contain the first 512 bytes of the response we receieved from the server.
  """
  lastError: String
}

"""Payloads for a subscription"""
type OneGraphAppSubscriptionPayloadsConnection {
  """List of subscription payloads"""
  nodes: [OneGraphAppSubscriptionPayload!]!
}

scalar JSON

"""Webhook destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebhookDestination {
  """Url that the webhook will deliver payloads to."""
  url: String!
}

"""Websocket destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebsocketDestination {
  """The client-side id for the subscription."""
  clientId: String!
}

"""
Destination for a OneGraph subscription that is only retained and not delivered.
"""
type OneGraphAppSubscriptionRetainedOnlyDestination {
  retainedOnly: Boolean!
}

union OneGraphAppSubscriptionDestination = OneGraphAppSubscriptionRetainedOnlyDestination | OneGraphAppSubscriptionWebsocketDestination | OneGraphAppSubscriptionWebhookDestination

"""Information about a subscription to Salesforce."""
type OneGraphSalesforceSubscriptionInfo {
  """
  The Id of the Salesforce Organization that this subscription is subscription to
  """
  organizationId: String!
}

"""Information about a subscription to gmail."""
type OneGraphGmailWatch {
  """Email address that is being watched."""
  emailAddress: String!
}

"""Subscription created by the app"""
type OneGraphAppSubscription {
  """Unique id for the subscription."""
  id: String!

  """Status of the subscription."""
  status: String!

  """Query that the subscription run."""
  query: String!

  """
  If this is a subscription to Gmail, contains extra information about the Gmail subscription
  """
  gmailWatch: OneGraphGmailWatch

  """
  If this is a subscription to Salesforce, contains extra information about the Salesforce subscription
  """
  salesforceInfo: OneGraphSalesforceSubscriptionInfo

  """Destination for the subscription payloads"""
  destination: OneGraphAppSubscriptionDestination!

  """Reason why this subscription can't be updated if it can't be updated."""
  updatesUnsupportedReason: String

  """The variables that this query was saved with."""
  requestVariables: JSON

  """
  The time that this subscription was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  Whether this subscription retains payloads. Payloads are available through the `payload` field on the subscription.
  """
  retainPayloads: Boolean!

  """
  Latest payloads for a subscription, if the subscription was created with `retainPayloads` set to true.
  """
  payloads(
    """Number of payloads to fetch. Defaults to 20, maximum is 100."""
    first: Int = 20
  ): OneGraphAppSubscriptionPayloadsConnection
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""
Subscriptions created by the app, with extra information about pagination.
"""
type OneGraphAppSubscriptionsConnection {
  """Pagination information."""
  pageInfo: PageInfo!

  """List of subscriptions created by the app."""
  nodes: [OneGraphAppSubscription!]!
}

"""Custom OAuth client for Adroll"""
type OneGraphAdrollServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Asana"""
type OneGraphAsanaServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Box"""
type OneGraphBoxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Contentful"""
type OneGraphContentfulServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dev.to"""
type OneGraphDevToServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Docusign"""
type OneGraphDocusignServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dribbble"""
type OneGraphDribbbleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dropbox"""
type OneGraphDropboxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Egghead.io"""
type OneGraphEggheadioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Eventil"""
type OneGraphEventilServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Facebook"""
type OneGraphFacebookServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Firebase"""
type OneGraphFirebaseServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

type OneGraphGitHubAppWebhook {
  signingSecret: String!
  webhookUrl: String!
}

"""Custom OAuth client for GitHub"""
type OneGraphGitHubServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
  gitHubAppWebhook: OneGraphGitHubAppWebhook
}

"""Custom OAuth client for Gmail"""
type OneGraphGmailServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google"""
type OneGraphGoogleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Ads"""
type OneGraphGoogleAdsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Analytics"""
type OneGraphGoogleAnalyticsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Calendar"""
type OneGraphGoogleCalendarServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Compute"""
type OneGraphGoogleComputeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Docs"""
type OneGraphGoogleDocsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Search Console"""
type OneGraphGoogleSearchConsoleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Translate"""
type OneGraphGoogleTranslateServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Hubspot"""
type OneGraphHubspotServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Intercom"""
type OneGraphIntercomServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Mailchimp"""
type OneGraphMailchimpServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Meetup"""
type OneGraphMeetupServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Netlify"""
type OneGraphNetlifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Notion"""
type OneGraphNotionServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Product Hunt"""
type OneGraphProductHuntServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for QuickBooks"""
type OneGraphQuickbooksServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Salesforce"""
type OneGraphSalesforceServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Slack Event Webhook for an app."""
type OneGraphSlackEventWebhook {
  """Unique identifier."""
  id: String!

  """Custom OAuth service id."""
  serviceAuthId: String!

  """
  The webhook url that should be set as the request url for your Slack app.
  """
  webhookUrl: String!

  """
  Last time that the webhook was verified by Slack, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  verifiedAt: String

  """
  Date that the webhook was created, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  createdAt: String!

  """The signing secret, masked."""
  maskedSigningSecret: String

  """The app token, masked."""
  maskedAppToken: String
}

"""Custom OAuth client for Slack"""
type OneGraphSlackServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
  slackEventWebhook: OneGraphSlackEventWebhook
}

"""Custom OAuth client for Spotify"""
type OneGraphSpotifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Stripe"""
type OneGraphStripeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Trello"""
type OneGraphTrelloServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twilio"""
type OneGraphTwilioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twitter"""
type OneGraphTwitterServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twitch"""
type OneGraphTwitchTvServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for You Need a Budget"""
type OneGraphYnabServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for YouTube"""
type OneGraphYoutubeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Vercel"""
type OneGraphZeitServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Zendesk"""
type OneGraphZendeskServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for a service"""
interface OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""A OneGraph Org"""
type OneGraphOrg {
  """The id of the OneGraph Org"""
  id: String!

  """The name of the OneGraph Org"""
  name: String!

  """All OneGraph apps belonging to this organization"""
  apps: [OneGraphApp!]!
}

"""A OneGraph App"""
type OneGraphApp {
  """The id of the OneGraph App"""
  id: String!

  """The description of the OneGraph App"""
  description: String!

  """The subdomain of the OneGraph App"""
  subdomain: String!

  """The name of the OneGraph App"""
  name: String!

  """The origins allowed for this OneGraph App from CORS requests"""
  corsOrigins: [String!]!

  """The id of the OneGraph organization that this app belongs to"""
  orgId: String!

  """The OneGraph organization that this app belongs to"""
  org: OneGraphOrg

  """The queries belonging to this OneGraph app"""
  queries: [OneGraphQuery!]!

  """
  The custom clientId/clientSecret that have been set for services (e.g. Gmail and Slack) that belong to this OneGraph app
  """
  serviceAuths: [OneGraphServiceAuth!]!

  """Subscriptions created with this app"""
  subscriptions(
    """
    Fiter by the Subscription's Salesforce organization Id, if the subscription is to a change in Salesforce..
    """
    salesforceOrganizationId: String

    """
    Fiter by the Subscription's webhook url, if the destination is a webhook.
    """
    webhookUrl: String

    """Fiter by status of the subscription"""
    status: OneGraphAppSubscriptionsStatusEnumArg

    """Fetch items in the list after the specified cursor"""
    after: String

    """How many subsriptions to fetch"""
    first: Int = 25
  ): OneGraphAppSubscriptionsConnection!

  """The JWT settings for this app"""
  jwtSettings: OneGraphAppJwtSettings!

  """Activity related to this app"""
  auditLogs(
    """
    How many log items to pull from the front of the collection, maximum of `250`
    """
    first: Int = 10
  ): OneGraphAppLogConnection!

  """
  Sites on Netlify associated with this app. OneGraph will allow CORS and authentication redirects to all previews, branch, and production deploys of these sites.
  """
  netlifySiteNames: [String!]!

  """Custom cors origins"""
  customCorsOrigins: [OneGraphCustomCorsOrigin!]!

  """List of persisted queries for this app"""
  persistedQueries(
    """Only return persisted queries that have all of the provided tags."""
    tags: [String!]

    """Returns results after the provided cursor."""
    after: String

    """How many persisted queries to return. Defaults to 10, max 100."""
    first: Int = 10
  ): OneGraphPersistedQueryConnection!

  """GitHub repos for the app that can have subscriptions on OneGraph."""
  gitHubRepositorySubscriptionDelegates: OneGraphGithubRepositorySubscriptionDelegateConnection!

  """The Slack channel for AuthGuardian to post into upon user sign-in"""
  authGuardianSlackChannel: String

  """Whether the AuthGuardian Slack integration is enabled"""
  authGuardianSlackIntegrationEnabled: Boolean!

  """External GraphQL schemas for the app."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!

  """Custom Salesforce schema for the app."""
  salesforceSchema: OneGraphSalesforceSchema

  """
  The domain that must be authorized to receive push notifications from Google for Google Calendar subscriptions.
  """
  googleAuthorizedDomain: String!

  """Google Site Verification for the app"""
  googleSiteVerification: OneGraphGoogleSiteVerification

  """External Honeycomb config for the app"""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig

  """Customizations to the default GraphQL schema"""
  graphQLSchema: OneGraphGraphQLSchema
}

"""A query stored in Onegraph"""
type OneGraphQuery {
  """The id of the GraphQL query"""
  id: String!

  """The id of the app that this GraphQL query belongs to"""
  appId: String!

  """
  Whether a GraphQL query is globally enabled/disabled. Note that even if the query is enabled, a corresponding auth_token must share a tag with this query to use it.
  """
  enabled: Boolean!

  """
  Whether a GraphQL query is shared and publicly viewable, including all of its meta-information.
  """
  public: Boolean!

  """The version (currently a hash of the body) of the GraphQL query"""
  version: String!

  """The body of the GraphQL query"""
  body: String!

  """The name of the GraphQL query"""
  name: String!

  """An optional description of the GraphQL query"""
  description: String

  """The tags (for permissions and organization) of the GraphQL query"""
  tags: [String!]!

  """What time this query was created"""
  createdAtTs: String!

  """What time this query was created in milliseconds from the epoch"""
  createdAtMs: Int!
}

"""A query stored in OneGraph in shortened form for easy sharing"""
type OneGraphShortenedQuery {
  """The id of the shortened OneGraph query"""
  id: String!

  """The full query body of the shortened OneGraph query"""
  query: String!

  """The variables of the shortened OneGraph query"""
  variables: String

  """The pre-selected operation of the shortened OneGraph query"""
  operation: String

  """An optional description of the purpose of the query"""
  description: String

  """The optional short name for the shortened OneGraph query"""
  name: String

  """
  The fully-qualified url for the shortened OneGraph query, used for sharing
  """
  url: String!
}

input OneGraphServiceInfoFilter {
  """Filter for services that support custom service auth"""
  supportsCustomServiceAuth: Boolean

  """Filter for services that support OAuth login"""
  supportsOauthLogin: Boolean
}

"""
Root fields for the OneGraph service. Used by OneGraph to build OneGraph.
"""
type OneGraphServiceQuery {
  services(filter: OneGraphServiceInfoFilter): [OneGraphServiceInfo!]!
  shortenedUrl(id: String!): OneGraphShortenedQuery
  queries: [OneGraphQuery!]!
  searchQueries(query: String!): [OneGraphQuery!]!
  apps: [OneGraphApp!]!
  app(
    """App id"""
    id: String!
  ): OneGraphApp!
  orgs: [OneGraphOrg!]!
  org(
    """Org id"""
    id: String!
  ): OneGraphOrg!
  serverInfo: OneGraphServerInfo!
  authGuardianPreview(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload

  """
  An identity function. The field will return whatever is provided as the input.
  """
  identity(
    """The input that should be returned."""
    input: JSON
  ): JSON

  """A graphql subscription."""
  graphQLSubscription(
    """The unique id for the app."""
    appId: String!

    """The unique id for the subscription."""
    id: String!
  ): OneGraphAppSubscription

  """Fetch a single persisted query by its id."""
  persistedQuery(
    """The id of the app that the persisted query belongs to."""
    appId: String!

    """The id of the persisted query."""
    id: String!
  ): OneGraphPersistedQuery!

  """Find a GraphQL schema by its id."""
  graphQLSchema(
    """The id of the app that the GraphQL schema belongs to."""
    appId: String!

    """The id of the GraphQL schema."""
    id: String!
  ): OneGraphGraphQLSchema!
  netlifyCliEvents(
    """The number of events to fetch. The maximum is 1000."""
    first: Int = 1000
    sessionId: String!
  ): [OneGraphNetlifyCliSessionEvent!]!

  """Netlify CLI sessions, orderd by createdAt descending."""
  netlifyCliSessionsByAppId(
    """The number of sessions to fetch. The maximum is 10."""
    first: Int = 10
    appId: String!
  ): [OneGraphNetlifyCliSession!]!

  """Get a Netlify CLI session by its id."""
  netlifyCliSession(id: String!): OneGraphNetlifyCliSession!
}

"""Download data for npm overall"""
type NpmOverallDownloadPeriodData {
  """The start date of download stats"""
  start: String!

  """The end date of download stats"""
  end: String!

  """
  The download stats for all over npm for the given range. Check out explanation of how [npm download counts work](http://blog.npmjs.org/post/92574016600/numeric-precision-matters-how-npm-download-counts), including "what counts as a download?"
  """
  count: Int!

  """
  "Download data for all of npm for a given period in a daily breakdown"
  """
  perDay: [NpmDownloadsPerDay!]!
}

"""Information about download stats related to a package"""
type NpmOverallDownloadData {
  """The download status for all of npm over the last day"""
  lastDay: NpmOverallDownloadPeriodData

  """The download status for all of npm over the last week"""
  lastWeek: NpmOverallDownloadPeriodData

  """The download status for all of npm over the last month"""
  lastMonth: NpmOverallDownloadPeriodData

  """The download status for all of npm for a specific period"""
  period(
    """
    The later date for download stats, e.g. 2018-12-07. Must be after `startDate`
    """
    endDate: String!

    """
    The earlier date for download stats, e.g. 2018-12-06. Must be before `endDate`
    """
    startDate: String!
  ): NpmOverallDownloadPeriodData

  """The download status for all of npm for a specific day"""
  day(
    """The specific date for download stats, e.g. 2018-12-06"""
    date: String!
  ): NpmOverallDownloadPeriodData
}

type NpmPackageMetadataDistTagEntry {
  """The name of the tag"""
  tag: String!

  """The version as a string for this tag"""
  versionString: String!

  """The full version for this tag"""
  version: NpmPackageVersion
}

type NpmPackageMetadataDistTagLatestEntry {
  """The version as a string for this tag"""
  versionString: String

  """The full version for the `latest` tag"""
  version: NpmPackageVersion
}

"""
Tags can be used to provide an alias instead of version numbers. For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., stable, beta, dev, canary.
"""
type NpmPackageDistTags {
  """
  By default, the latest tag is used by npm to identify the current version of a package
  """
  latest: NpmPackageMetadataDistTagLatestEntry

  """Any custom tags used by the package maintainers"""
  custom: [NpmPackageMetadataDistTagEntry!]!
}

type NpmDownloadsPerDay {
  """The download count"""
  count: Int

  """"""
  day: String
}

"""Download data for a given package"""
type NpmPackageDownloadPeriodData {
  """The start date of download stats"""
  start: String!

  """The end date of download stats"""
  end: String!

  """
  The download stats for the given package and range. Check out explanation of how [npm download counts work](http://blog.npmjs.org/post/92574016600/numeric-precision-matters-how-npm-download-counts), including "what counts as a download?"
  """
  count: Int!

  """
  "Download data for this package and period in a daily breakdown"
  """
  perDay: [NpmDownloadsPerDay!]!
}

"""Information about download stats related to a package"""
type NpmPackageDownloadData {
  """The download status for this package over the last day"""
  lastDay: NpmPackageDownloadPeriodData

  """The download status for this package over the last week"""
  lastWeek: NpmPackageDownloadPeriodData

  """The download status for this package over the last month"""
  lastMonth: NpmPackageDownloadPeriodData

  """The download status for this package for a specific period"""
  period(
    """
    The later date for download stats, e.g. 2018-12-07. Must be after `startDate`
    """
    endDate: String!

    """
    The earlier date for download stats, e.g. 2018-12-06. Must be before `endDate`
    """
    startDate: String!
  ): NpmPackageDownloadPeriodData

  """The download status for this package for a specific day"""
  day(
    """The specific date for download stats, e.g. 2018-12-06"""
    date: String!
  ): NpmPackageDownloadPeriodData
}

"""A npm package license"""
type NpmPackageLicense {
  """
  The [SPDX identifier](https://spdx.org/licenses/) of the package's license
  """
  type: String

  """A url for the full license"""
  url: String
}

"""
A mapping of other packages this version depends on to the required semver ranges
"""
type NpmPackageVersionDependency {
  """The package name of the dependency"""
  name: String

  """The version of the package dependency"""
  version: String
}

"""The dist object is generated by npm and may be relied upon"""
type NpmPackageDist {
  """"""
  tarball: String

  """"""
  shasum: String
}

"""A npm package version"""
type NpmPackageVersion {
  """
  `true` if this version is known to have a shrinkwrap that must be used to install it; false if this version is known not to have a shrinkwrap. If this field is undefined, the client must determine through other means if a shrinkwrap exists.
  """
  hasShrinkwrap: Boolean

  """"""
  from: String

  """`package@version`, such as `npm@1.0.0`"""
  id: String

  """The version of node used to publish this"""
  nodeVersion: String

  """The version of the npm client used to publish this"""
  npmVersion: String

  """The dist object is generated by npm and may be relied upon."""
  dist: NpmPackageDist

  """The SHA-1 sum of the tarball"""
  shasum: String

  """A short description of the package at this version"""
  description: String

  """The package's entry point (e.g., `index.js` or `main.js`)"""
  main: String

  """The package name"""
  name: String

  """Deprecation warnings message of this version"""
  deprecated: String

  """The version string for this version"""
  version: String

  """"""
  maintainers: [NpmPackageMaintainer!]

  """
  A mapping of other packages this version depends on to the required semver ranges
  """
  dependencies: [NpmPackageVersionDependency!]!

  """
  A mapping of package names to the required semver ranges of _development_ dependencies
  """
  devDependencies: [NpmPackageVersionDependency!]!

  """
  A mapping of package names to the required semver ranges of _optional_ dependencies
  """
  optionalDependencies: [NpmPackageVersionDependency!]!

  """
  A mapping of package names to the required semver ranges of _peer_ dependencies
  """
  peerDependencies: [NpmPackageVersionDependency!]!

  """The license for this package"""
  license: NpmPackageLicense!
}

"""Information on where bugs are filed for this package"""
type NpmPackageBugs {
  """"""
  url: String
}

"""
Specifies the repository where the source for this package might be found
"""
type NpmPackageRepository {
  """"""
  url: String

  """"""
  type: String
}

"""A package publishing time for a given version"""
type NpmPackageTimeVersion {
  """The package version"""
  version: String

  """The date this version was published"""
  date: String
}

"""
Information about when a package was created and last modified, as well as the publishing date for each version
"""
type NpmPackageTime {
  """"""
  created: String

  """"""
  modified: String

  """Publishing information for each version of a package"""
  versions: [NpmPackageTimeVersion!]!
}

"""A npm package maintainer"""
type NpmPackageMaintainer {
  """The package maintainer's email"""
  email: String

  """"""
  name: String
}

"""A npm package"""
type NpmPackage {
  """The package name, used as an ID in CouchDB"""
  id: String

  """The revision number of this version of the document in CouchDB"""
  rev: String

  """The primary author of the npm package"""
  author: NpmPackageMaintainer

  """
  A mapping of versions to the time published, along with created and modified timestamps
  """
  time: NpmPackageTime

  """The package name"""
  name: String

  """A short description of the package"""
  description: String

  """
  The first 64K of the README data for the most-recently published version of the package
  """
  readme: String

  """"""
  homepage: String

  """The repository url as given in package.json, for the latest version"""
  repository: NpmPackageRepository

  """"""
  keywords: [String!]

  """"""
  bugs: NpmPackageBugs

  """The name of the file from which the readme data was taken"""
  readmeFilename: String

  """
  People with permission to publish this package (NB: Not authoritative, but informational)
  """
  maintainers: [NpmPackageMaintainer!]

  """A mapping of semver-compliant version numbers to version data"""
  versions: [NpmPackageVersion!]!

  """Summary download stats for a package"""
  downloads: NpmPackageDownloadData!

  """The license for this package"""
  license: NpmPackageLicense!

  """
  Tags can be used to provide an alias instead of version numbers. For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., stable, beta, dev, canary.
  """
  distTags: NpmPackageDistTags
}

"""The root for Npm."""
type NpmQuery {
  """Find a npm package member by its npm name, e.g. `"fela"`"""
  package(
    """Find the package by its name"""
    name: String!
  ): NpmPackage

  """Overall download stats in the npm ecosystem"""
  downloads: NpmOverallDownloadData
}

input OneGraphServiceUserIds {
  """User id for Adroll"""
  adroll: String

  """User id for Asana"""
  asana: String

  """User id for Box"""
  box: String

  """User id for Contentful"""
  contentful: String

  """User id for Dev.to"""
  devTo: String

  """User id for Docusign"""
  docusign: String

  """User id for Dribbble"""
  dribbble: String

  """User id for Dropbox"""
  dropbox: String

  """User id for Egghead.io"""
  eggheadio: String

  """User id for Eventil"""
  eventil: String

  """User id for Facebook"""
  facebookBusiness: String

  """User id for Firebase"""
  firebase: String

  """User id for GitHub"""
  gitHub: String

  """User id for Gmail"""
  gmail: String

  """User id for Google"""
  google: String

  """User id for Google Ads"""
  googleAds: String

  """User id for Google Analytics"""
  googleAnalytics: String

  """User id for Google Calendar"""
  googleCalendar: String

  """User id for Google Compute"""
  googleCompute: String

  """User id for Google Docs"""
  googleDocs: String

  """User id for Google Search Console"""
  googleSearchConsole: String

  """User id for Google Translate"""
  googleTranslate: String

  """User id for Hubspot"""
  hubspot: String

  """User id for Intercom"""
  intercom: String

  """User id for Mailchimp"""
  mailchimp: String

  """User id for Meetup"""
  meetup: String

  """User id for Netlify"""
  netlify: String

  """User id for Notion"""
  notion: String

  """User id for Product Hunt"""
  productHunt: String

  """User id for QuickBooks"""
  quickbooks: String

  """User id for Salesforce"""
  salesforce: String

  """User id for Slack"""
  slack: String

  """User id for Spotify"""
  spotify: String

  """User id for Stripe"""
  stripe: String

  """User id for Trello"""
  trello: String

  """User id for Twilio"""
  twilio: String

  """User id for Twitter"""
  twitter: String

  """User id for Twitch"""
  twitchTv: String

  """User id for You Need a Budget"""
  ynab: String

  """User id for YouTube"""
  youTube: String

  """User id for Vercel"""
  zeit: String

  """User id for Zendesk"""
  zendesk: String
}

input OneGraphZendeskAPITokenAuth {
  token: String!
  email: String!
  subdomain: String!
}

input OneGraphUSPSAPIAuth {
  password: String
  userId: String!
}

input OneGraphUPSAPIAuth {
  accessToken: String!
  password: String!
  username: String!
}

input OneGraphTwilioAuth {
  authToken: String!
  accountSid: String!
}

input OneGraphTrelloTokenAuth {
  token: String!
  apiKey: String!
}

"""
Authenticate requests when using the Stripe API on behalf of a connected account using the Stripe-Account header and the connected account’s ID. https://stripe.com/docs/connect/authentication#stripe-account-header
"""
input OneGraphStripeConnectAuthArg {
  """Id of the connected account for which the request is being made."""
  connectedStripeAccountId: String!

  """Your platform account’s secret key."""
  platformSecretKey: String!
}

input OneGraphSalesforceOAuthArg {
  instanceUrl: String!
  token: String!
}

input OneGraphOrbitAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.orbit.love/user/edit) in your Orbit dashboard.
  """
  apiKey: String!
}

input OneGraphOpenCollectiveAuthArg {
  """
  For use with a API key. To generate an api key, see the [applications page](https://opencollective.com/applications) in your OpenCollective dashboard.
  """
  apiKey: String!
}

input OneGraphNpmBasicAuth {
  password: String!
  username: String!
}

input OneGraphNpmAuthArg {
  """
  An API or OAuth token with sufficient permissions to publish npm packages
  """
  apiToken: String

  """Basic username/password authentication"""
  basic: OneGraphNpmBasicAuth
}

input OneGraphNetlifyAuthArg {
  oauthToken: String!
}

input OneGraphMuxAPITokenAuthArg {
  secret: String!
  tokenId: String!
}

input OneGraphMuxAuthArg {
  """
  For advanced usage: if you have separately implemented the Mux OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a API access token. To generate an access token ID and secret, see the [settings page](https://dashboard.mux.com/settings/access-tokens) in your Mux dashboard. Will take priority over the `oauthToken` argument if both are provided.
  """
  accessToken: OneGraphMuxAPITokenAuthArg
}

input OneGraphLogdnaServiceAuthArg {
  """
  Service Key from LogDNA. Retrive a service key from [your profile](https://app.logdna.com/manage/profile) under API Keys > Service Keys.
  """
  serviceKey: String!
}

input OneGraphGoogleAdsAuthArg {
  oauthToken: String!

  """
  A developer token from Google allows your app to connect to the Google Ads API.
  
  To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing. Navigate to TOOLS & SETTINGS > SETUP > API Center."
  """
  developerToken: String!
}

input OneGraphFedexAPIAuth {
  meterNumber: String!
  accountNumber: String!
  password: String!
  key: String!
}

input OneGraphDevToAuthArg {
  """
  For advanced usage: if you have separately implemented the Dev.to OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a personal API token, see the [Dev.to authentication](https://docs.dev.to/api/#section/Authentication/api_key) docs on generating a token. Will take priority over the `oauthToken` argument if both are provided.
  """
  apiKey: String
}

input OneGraphCloudflareUserAuthArg {
  key: String!
  email: String!
}

input OneGraphChagebeeAuthArg {
  """
  A [Chargebee API key](https://www.chargebee.com/docs/2.0/api_keys.html). To create a key go to **Settings** > **Configure Chargebee** > **API Keys and Webhooks** and then click on the **API Keys** tab.
  """
  apiKey: String!

  """
  The [chargebee site](https://www.chargebee.com/docs/2.0/sites-intro.html). 
  """
  site: String!
}

input OneGraphApolloAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.apollo.love/user/edit) in your Apollo dashboard.
  """
  apiKey: String!
}

input OneGraphServiceAuths {
  zendeskAPITokenAuth: OneGraphZendeskAPITokenAuth
  zeitOAuthToken: String
  youtubeOAuthToken: String

  """
  A Wordpress bearer token. This arg is compatible with the `authToken` that is passed as an `Authorization` header in [wp-graphql-jwt-authentication plugin](https://github.com/wp-graphql/wp-graphql-jwt-authentication), or any other plugin that uses a bearer token in the `Authorization` header. 
  """
  wordpressBearerToken: String
  uspsAPIAuth: OneGraphUSPSAPIAuth
  upsAPIAuth: OneGraphUPSAPIAuth
  twilioAuth: OneGraphTwilioAuth
  trelloTokenAuth: OneGraphTrelloTokenAuth
  stripeOAuthToken: String
  stripeConnectAuth: OneGraphStripeConnectAuthArg
  spotifyOAuthToken: String
  slackOAuthToken: String
  salesforceOAuth: OneGraphSalesforceOAuthArg
  productHuntOAuthToken: String
  orbit: OneGraphOrbitAuthArg
  openCollective: OneGraphOpenCollectiveAuthArg
  onegraphToken: String
  npmAuth: OneGraphNpmAuthArg
  netlifyAuth: OneGraphNetlifyAuthArg
  muxAuth: OneGraphMuxAuthArg
  mixpanelApiSecret: String
  logdnaServiceAuth: OneGraphLogdnaServiceAuthArg
  intercomOAuthToken: String
  hubspotOAuthToken: String
  graphCmsToken: String
  googleTranslateOAuthToken: String
  googleSearchConsoleOAuthToken: String
  googleMapsKey: String
  googleDocsOAuthToken: String
  googleComputeOAuthToken: String
  googleCalendarOAuthToken: String
  googleAdsAuth: OneGraphGoogleAdsAuthArg
  googleOAuthToken: String
  gmailOAuthToken: String
  gitHubOAuthToken: String
  firebaseOAuthToken: String
  fedexAPIAuth: OneGraphFedexAPIAuth
  facebookOAuthToken: String
  dropboxOAuthToken: String
  dribbbleOAuthToken: String
  devToAuth: OneGraphDevToAuthArg
  crunchbaseUserKey: String
  cloudflareUserAuth: OneGraphCloudflareUserAuthArg
  clearbitAuth: String
  chargebee: OneGraphChagebeeAuthArg
  brexAuth: String
  apollo: OneGraphApolloAuthArg
  airtableApiKey: String
}

"""
The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
"""
enum OneGraphAccessTokenAnchorEnum {
  """
  Use the logged in OneGraph user. The user must be logged in to the OneGraph dashboard to use this option.
  """
  ONEGRAPH_USER

  """
  Use the logged in Netlify user. The token must have an active Netlify auth to use this option.
  """
  NETLIFY_USER

  """Use the provided Netlify site."""
  NETLIFY_SITE
}

"""Custom data for a OneGraph user auth."""
type OneGraphUserAuthCustomDataForOneGraph {
  """AppId that the tokens applies to."""
  appId: String
}

"""Service-specific data for a user auth."""
union OneGraphUserAuthCustomData = OneGraphUserAuthCustomDataForOneGraph

"""A user auth associated with an access token"""
type OneGraphUserAuth {
  """Service that the auth belongs to."""
  service: OneGraphServiceEnum!

  """Unique id for the logged-in entity on the service."""
  foreignUserId: String!

  """Scopes granted for the service."""
  scopes: [String!]

  """Service-specific data for the user auth"""
  customData: OneGraphUserAuthCustomData
}

"""A OneGraph Access Token"""
type OneGraphAccessToken {
  """Bearer token"""
  token: String!

  """
  Time that the the token expires, measured in seconds since the Unix epoch
  """
  expireDate: Int!

  """Token name, if it is a personal access token"""
  name: String

  """AppId that the token belongs to"""
  appId: String!

  """User auths for the access token"""
  userAuths: [OneGraphUserAuth!]!

  """
  The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
  """
  anchor: OneGraphAccessTokenAnchorEnum

  """Netlify-specific ID for the token"""
  netlifyId: String
}

"""The settings for a OneGraph User"""
type OneGraphUserSettings {
  """The tours completed by this OneGraph user"""
  completedTours: [String!]!
}

"""A OneGraph User"""
type OneGraphUser {
  """The id of the OneGraph User"""
  id: String!

  """Whether this OneGraph user has confirmed their account"""
  confirmed: Boolean!

  """The primary email of the currently logged-in OneGraph user"""
  email: String!

  """The full name of the currently logged-in OneGraph user"""
  fullName: String!

  """
  The date at which this user agreed to the OneGraph terms of service at https://www.onegraph.com/terms-and-conditions
  """
  agreedToTosAt: Int

  """The settings of the currently logged-in OneGraph user"""
  settings: OneGraphUserSettings!

  """User hash for securely identifying a user with Intercom"""
  intercomUserHash: String!

  """Personal access tokens"""
  personalTokens: [OneGraphAccessToken!]

  """
  The gitHub databaseId if this OneGraph User has associated their account with a GitHub account
  """
  gitHubUserId: String
}

"""A scope that has been granted to the user"""
type OneGraphServiceMetadataGrantedScope {
  """The name of the scope that the underlying service uses."""
  scope: String!

  """
  Details about the scope. This may be null if OneGraph has not mapped out the scope.
  """
  scopeInfo: OneGraphServiceScope
}

"""Filter linked nodes by __typename."""
input OneGraphLinkedNodesTypenameFilter {
  """
  Checks for linked nodes where the __typename is in the list of the provided values.
  """
  in: [String!]

  """
  Checks for linked nodes where the __typename is equal to the provided value.
  """
  equalTo: String
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnumArg {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Filter linked nodes by service."""
input OneGraphLinkedNodesServiceFilter {
  """
  Checks for linked nodes where the service is in the list of the provided values.
  """
  in: [OneGraphServiceEnumArg!]

  """
  Checks for linked nodes where the service is equal to the provided value.
  """
  equalTo: OneGraphServiceEnumArg
}

input OneGraphLinkedNodesConnectionFilter {
  """Filter connections by their GraphQL __typename"""
  typename: OneGraphLinkedNodesTypenameFilter

  """Filter connections by service"""
  service: OneGraphLinkedNodesServiceFilter
}

"""An object with a globally unique id across all of OneGraph"""
interface OneGraphNode {
  """The id of the object."""
  oneGraphId: ID!

  """List of OneGraphNodes that are linked from this node."""
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!
}

"""List of OneGraphNodes that are linked from this node."""
type OneGraphLinkedNodesConnection {
  """List of OneGraphNodes that are linked from this node."""
  nodes: [OneGraphNode!]!
}

"""An OAuth scope that the service supports."""
type OneGraphServiceScope {
  category: String
  scope: String!
  display: String!
  isDefault: Boolean!
  isRequired: Boolean!
  description: String!
  title: String
}

"""Information about a service that OneGraph supports."""
type OneGraphServiceInfo implements OneGraphNode {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!

  """
  Service string that can be provided in the URL when going through the oauth flow.
  """
  slug: String!
  supportsOauthLogin: Boolean!
  supportsCustomServiceAuth: Boolean!
  supportsCustomRedirectUri: Boolean!
  supportsTestFlow: Boolean!
  availableScopes: [OneGraphServiceScope!]

  """A short-lived svg image url of the logo for the service. May be null."""
  logoUrl: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnum {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Information about a service."""
type OneGraphServiceMetadata {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!
  isLoggedIn: Boolean!
  usedTestFlow: Boolean!
  foreignUserId: String

  """
  Bearer token that can be used to query the underlying API directly. This field will always be null unless the OneGraph App has enabled sharing tokens for its custom OAuth client.
  """
  bearerToken: String
  serviceInfo: OneGraphServiceInfo!

  """
  The scopes that the user granted for this service. This is a best estimate of the scopes that were granted. Most services do not have a way to query the scopes on an auth, and some services do not return information about the scopes that were granted in the auth flow.
  """
  grantedScopes: [OneGraphServiceMetadataGrantedScope!]
}

"""Information about OneGraph services"""
type OneGraphServicesMetadata {
  loggedInServices: [OneGraphServiceMetadata!]!
  adroll: OneGraphServiceMetadata!
  asana: OneGraphServiceMetadata!
  box: OneGraphServiceMetadata!
  contentful: OneGraphServiceMetadata!
  devTo: OneGraphServiceMetadata!
  docusign: OneGraphServiceMetadata!
  dribbble: OneGraphServiceMetadata!
  dropbox: OneGraphServiceMetadata!
  eggheadio: OneGraphServiceMetadata!
  eventil: OneGraphServiceMetadata!
  facebookBusiness: OneGraphServiceMetadata!
  firebase: OneGraphServiceMetadata!
  gitHub: OneGraphServiceMetadata!
  gmail: OneGraphServiceMetadata!
  google: OneGraphServiceMetadata!
  googleAds: OneGraphServiceMetadata!
  googleAnalytics: OneGraphServiceMetadata!
  googleCalendar: OneGraphServiceMetadata!
  googleCompute: OneGraphServiceMetadata!
  googleDocs: OneGraphServiceMetadata!
  googleSearchConsole: OneGraphServiceMetadata!
  googleTranslate: OneGraphServiceMetadata!
  hubspot: OneGraphServiceMetadata!
  intercom: OneGraphServiceMetadata!
  mailchimp: OneGraphServiceMetadata!
  meetup: OneGraphServiceMetadata!
  netlify: OneGraphServiceMetadata!
  notion: OneGraphServiceMetadata!
  productHunt: OneGraphServiceMetadata!
  quickbooks: OneGraphServiceMetadata!
  salesforce: OneGraphServiceMetadata!
  slack: OneGraphServiceMetadata!
  spotify: OneGraphServiceMetadata!
  stripe: OneGraphServiceMetadata!
  trello: OneGraphServiceMetadata!
  twilio: OneGraphServiceMetadata!
  twitter: OneGraphServiceMetadata!
  twitchTv: OneGraphServiceMetadata!
  ynab: OneGraphServiceMetadata!
  youTube: OneGraphServiceMetadata!
  zeit: OneGraphServiceMetadata!
  zendesk: OneGraphServiceMetadata!
  airtable: OneGraphServiceMetadata!
  apollo: OneGraphServiceMetadata!
  brex: OneGraphServiceMetadata!
  bundlephobia: OneGraphServiceMetadata!
  chargebee: OneGraphServiceMetadata!
  clearbit: OneGraphServiceMetadata!
  cloudflare: OneGraphServiceMetadata!
  crunchbase: OneGraphServiceMetadata!
  descuri: OneGraphServiceMetadata!
  fedex: OneGraphServiceMetadata!
  googleMaps: OneGraphServiceMetadata!
  graphcms: OneGraphServiceMetadata!
  immigrationGraph: OneGraphServiceMetadata!
  logdna: OneGraphServiceMetadata!
  mixpanel: OneGraphServiceMetadata!
  mux: OneGraphServiceMetadata!
  npm: OneGraphServiceMetadata!
  onegraph: OneGraphServiceMetadata!
  orbit: OneGraphServiceMetadata!
  openCollective: OneGraphServiceMetadata!
  rss: OneGraphServiceMetadata!
  ups: OneGraphServiceMetadata!
  usps: OneGraphServiceMetadata!
  wordpress: OneGraphServiceMetadata!
  facebook: OneGraphServiceMetadata! @deprecated(reason: "Use facebookBusiness.")
}

"""Currently authed user"""
type Viewer {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!

  """Currently logged in oneUser"""
  oneGraph: OneGraphUser
}

type Query {
  me(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): Viewer!

  """Fetches an object given its globally unique `oneGraphId`."""
  oneGraphNode(
    """The globally unique `oneGraphId`."""
    oneGraphId: ID!

    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphNode

  """The root for npm queries"""
  npm(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): NpmQuery!
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphServiceQuery!
}